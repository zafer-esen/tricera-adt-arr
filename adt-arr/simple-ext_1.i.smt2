(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (h Int) (n Addr)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun defHeapObject    () HeapObject defObj)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defHeapObject)))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defHeapObject))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))

;===============================================================================
(declare-fun inv_main12 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main13 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main14 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main20 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main23 (Heap Addr Addr Addr Int Int) Bool)
(declare-fun inv_main26 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main29 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main34 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main35 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main36 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main44 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main7 (Heap Addr Int) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Int) (var7 Addr) (var8 Heap) (var9 Addr) (var10 Int) (var11 Addr) (var12 Addr) (var13 Int) (var14 Heap) (var15 Heap)) (or (not (and (inv_main44 var15 var12 var0 var11 var13) (and (not (= var4 nullAddr)) (and (and (and (and (and (and (= var14 var15) (= var3 var12)) (= var2 var0)) (= var5 var11)) (= var10 var13)) (= var9 (n (getnode (read var15 var11))))) (and (and (and (and (= var8 (write var14 var5 defObj)) (= var1 var3)) (= var4 var9)) (= var7 var5)) (= var6 var10)))))) (inv_main44 var8 var1 var4 var4 var6))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Int) (var7 Heap) (var8 Addr) (var9 Heap)) (or (not (and (inv_main29 var9 var5 var0 var4 var6) (and (not (= var3 nullAddr)) (and (= var3 nullAddr) (and (and (and (and (= var7 (write var9 var4 (O_node (node (h (getnode (read var9 var4))) 0)))) (= var3 var5)) (= var1 var0)) (= var8 var4)) (= var2 var6)))))) (inv_main44 var7 var3 var1 var3 0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Heap) (var4 Addr) (var5 Addr) (var6 Int) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Heap)) (or (not (and (inv_main35 var10 var5 var1 var4 var6) (and (not (= var7 nullAddr)) (and (= var0 nullAddr) (and (and (and (and (and (= var3 var10) (= var7 var5)) (= var9 var1)) (= var8 var4)) (= var2 var6)) (= var0 (n (getnode (read var10 var4))))))))) (inv_main44 var3 var7 var9 var7 (+ var2 1)))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (inv_main13 var4 var2 var0 var1 var3)) (inv_main29 (write var4 var1 (O_node (node var3 (n (getnode (read var4 var1)))))) var2 var0 var1 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (and (inv_main12 var4 var2 var0 var1 var3) (not (<= 0 (+ (+ 30 (* (- 1) var3)) (- 1)))))) (inv_main13 var4 var2 var0 var1 var3))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Addr) (var4 Int) (var5 Heap)) (or (not (and (inv_main12 var5 var3 var0 var2 var4) (and (= var1 0) (<= 0 (+ (+ 30 (* (- 1) var4)) (- 1)))))) (inv_main13 var5 var3 var0 var2 var4))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap)) (or (not (inv_main7 var2 var1 var0)) (inv_main7 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 node) (var3 Heap)) (or (not (and (inv_main2 var3) (and (= var0 nullAddr) (and (= var1 (newHeap (alloc var3 (O_node var2)))) (= var0 (newAddr (alloc var3 (O_node var2)))))))) (inv_main7 var1 var0 1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap) (var5 Addr) (var6 Addr) (var7 Int) (var8 Addr) (var9 Int) (var10 Heap)) (or (not (and (inv_main34 var10 var6 var0 var5 var7) (and (= var3 var9) (and (and (and (and (and (= var4 var10) (= var2 var6)) (= var1 var0)) (= var8 var5)) (= var9 var7)) (= var3 (h (getnode (read var10 var5)))))))) (inv_main35 var4 var2 var1 var8 var9))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int) (var5 Heap)) (or (not (and (inv_main12 var5 var2 var0 var1 var3) (and (not (= var4 0)) (<= 0 (+ (+ 30 (* (- 1) var3)) (- 1)))))) (inv_main14 var5 var2 var0 var1 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (inv_main20 var4 var2 var0 var1 var3)) (inv_main26 (write var4 var1 (O_node (node (h (getnode (read var4 var1))) var0))) var2 var0 var1 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Int) (var6 Addr) (var7 Addr) (var8 Heap) (var9 Addr) (var10 Int)) (or (not (and (inv_main26 var8 var4 var1 var3 var5) (and (and (and (and (and (= var2 var8) (= var6 var4)) (= var0 var1)) (= var9 var3)) (= var10 var5)) (= var7 (n (getnode (read var8 var3))))))) (inv_main12 var2 var6 var0 var7 (+ var10 1)))))
(assert (forall ((var0 Addr) (var1 node) (var2 Addr) (var3 Heap) (var4 Heap)) (or (not (and (inv_main2 var4) (and (not (= var2 nullAddr)) (and (= var3 (newHeap (alloc var4 (O_node var1)))) (= var2 (newAddr (alloc var4 (O_node var1)))))))) (inv_main12 var3 var2 var0 var2 0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 node) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Int) (var11 Heap) (var12 Int) (var13 Heap) (var14 Addr) (var15 Heap) (var16 Addr)) (or (not (and (inv_main14 var15 var9 var0 var8 var10) (and (not (= var6 nullAddr)) (and (and (and (and (and (and (= var11 (newHeap (alloc var13 (O_node var5)))) (= var16 var1)) (= var14 var2)) (= var3 var7)) (= var12 var4)) (= var6 (newAddr (alloc var13 (O_node var5))))) (and (and (and (and (= var13 (write var15 var8 (O_node (node var10 (n (getnode (read var15 var8))))))) (= var1 var9)) (= var2 var0)) (= var7 var8)) (= var4 var10)))))) (inv_main20 var11 var16 var6 var3 var12))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Int) (var7 Heap) (var8 Addr) (var9 Heap)) (or (not (and (inv_main29 var9 var5 var0 var4 var6) (and (not (= var3 nullAddr)) (and (and (and (and (= var7 (write var9 var4 (O_node (node (h (getnode (read var9 var4))) 0)))) (= var3 var5)) (= var1 var0)) (= var8 var4)) (= var2 var6))))) (inv_main34 var7 var3 var1 var3 0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Heap) (var4 Addr) (var5 Addr) (var6 Int) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Heap)) (or (not (and (inv_main35 var10 var5 var1 var4 var6) (and (not (= var0 nullAddr)) (and (and (and (and (and (= var3 var10) (= var7 var5)) (= var9 var1)) (= var8 var4)) (= var2 var6)) (= var0 (n (getnode (read var10 var4)))))))) (inv_main34 var3 var7 var9 var0 (+ var2 1)))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int) (var5 Addr) (var6 Heap) (var7 Addr) (var8 Addr) (var9 Heap) (var10 Int)) (or (not (and (inv_main34 var9 var2 var0 var1 var3) (and (not (= var10 var4)) (and (and (and (and (and (= var6 var9) (= var7 var2)) (= var8 var0)) (= var5 var1)) (= var4 var3)) (= var10 (h (getnode (read var9 var1)))))))) (inv_main36 var6 var7 var8 var5 var4))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap) (var5 Int)) (or (not (inv_main23 var4 var2 var0 var1 var3 var5)) (inv_main23 var4 var2 var0 var1 var3 var5))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 node) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Int) (var11 Heap) (var12 Int) (var13 Heap) (var14 Addr) (var15 Heap) (var16 Addr)) (or (not (and (inv_main14 var15 var9 var0 var8 var10) (and (= var6 nullAddr) (and (and (and (and (and (and (= var11 (newHeap (alloc var13 (O_node var5)))) (= var16 var1)) (= var14 var2)) (= var3 var7)) (= var12 var4)) (= var6 (newAddr (alloc var13 (O_node var5))))) (and (and (and (and (= var13 (write var15 var8 (O_node (node var10 (n (getnode (read var15 var8))))))) (= var1 var9)) (= var2 var0)) (= var7 var8)) (= var4 var10)))))) (inv_main23 var11 var16 var6 var3 var12 1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main14 var4 var2 var0 var1 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main20 var4 var2 var0 var1 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main26 var4 var2 var0 var1 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main13 var4 var2 var0 var1 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main29 var4 var2 var0 var1 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main34 var4 var2 var0 var1 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (not (inv_main36 var4 var2 var0 var1 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main35 var4 var2 var0 var1 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main44 var4 var2 var0 var1 var3) (not (is-O_node (read var4 var1)))))))
(check-sat)
