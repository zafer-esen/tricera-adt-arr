(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unsat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (data Int) (next Addr) (prev Addr)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun defHeapObject    () HeapObject defObj)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defHeapObject)))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defHeapObject))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))

;===============================================================================
(declare-fun inv_main12 (Heap Int Int Int Int Addr Int) Bool)
(declare-fun inv_main15 (Heap Int Int Int Int Addr) Bool)
(declare-fun inv_main16 (Heap Int Int Int Int Addr) Bool)
(declare-fun inv_main18 (Heap Int Int Int Int Addr Addr) Bool)
(declare-fun inv_main19 (Heap Int Int Int Int Addr Addr) Bool)
(declare-fun inv_main22 (Heap Int Int Int Int Addr Addr Addr) Bool)
(declare-fun inv_main25 (Heap Int Int Int Int Addr Addr Addr Int) Bool)
(declare-fun inv_main28 (Heap Int Int Int Int Addr Addr Addr) Bool)
(declare-fun inv_main29 (Heap Int Int Int Int Addr Addr Addr) Bool)
(declare-fun inv_main32 (Heap Int Int Int Int Addr Addr) Bool)
(declare-fun inv_main36 (Heap Int Int Addr Addr Int) Bool)
(declare-fun inv_main37 (Heap Int Int Addr Addr Int) Bool)
(declare-fun inv_main39 (Heap Int Int Addr Addr Int) Bool)
(declare-fun inv_main4 (Heap Int Int) Bool)
(declare-fun inv_main42 (Heap Int Int Addr Addr Int) Bool)
(declare-fun inv_main50 (Heap Int Int Addr Addr Int) Bool)
(declare-fun inv_main51 (Heap Int Int Addr Addr Int) Bool)
(declare-fun inv_main9 (Heap Int Int Int Int Addr) Bool)
(assert (forall ((var0 Heap)) (or (not (= var0 emptyHeap)) (inv_main4 var0 5 1))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Int) (var3 Addr) (var4 Heap) (var5 Int) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Addr) (var11 Int) (var12 Int) (var13 Int) (var14 Int) (var15 Int)) (or (not (and (inv_main29 var4 var5 var13 var0 var12 var10 var8 var7) (and (and (and (and (and (and (and (= var1 (write var4 var8 (O_node (node (data (getnode (read var4 var8))) (next (getnode (read var4 var8))) var7)))) (= var14 var5)) (= var15 var13)) (= var11 var0)) (= var2 var12)) (= var3 var10)) (= var9 var8)) (= var6 var7)))) (inv_main18 var1 var14 var15 (+ var11 (- 1)) var2 var3 var6))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap) (var6 Int) (var7 Int) (var8 Int) (var9 Int) (var10 Heap) (var11 Addr)) (or (not (and (inv_main16 var5 var6 var3 var1 var2 var11) (and (and (and (and (and (= var10 (write var5 var11 (O_node (node var2 (next (getnode (read var5 var11))) (prev (getnode (read var5 var11))))))) (= var0 var6)) (= var8 var3)) (= var9 var1)) (= var7 var2)) (= var4 var11)))) (inv_main18 var10 var0 var8 var9 var7 var4 var4))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Addr) (var5 Addr) (var6 Heap) (var7 Int) (var8 Int) (var9 Int) (var10 Addr) (var11 Addr) (var12 Heap)) (or (not (and (inv_main42 var6 var7 var2 var5 var1 var0) (and (not (= var4 var10)) (and (and (and (and (and (and (= var12 var6) (= var9 var7)) (= var8 var2)) (= var10 var5)) (= var11 var1)) (= var3 var0)) (= var4 (next (getnode (read var6 var1)))))))) (inv_main36 var12 var9 var8 var10 var4 (+ var3 1)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Heap) (var7 Addr) (var8 Int) (var9 Int) (var10 Int) (var11 Addr) (var12 Int) (var13 Addr)) (or (not (and (inv_main32 var3 var4 var9 var0 var8 var7 var5) (and (and (and (and (and (and (= var6 (write var3 var5 (O_node (node (data (getnode (read var3 var5))) (next (getnode (read var3 var5))) var7)))) (= var12 var4)) (= var10 var9)) (= var1 var0)) (= var2 var8)) (= var13 var7)) (= var11 var5)))) (inv_main36 var6 var12 var10 var11 var11 1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr)) (or (not (inv_main9 var3 var4 var2 var0 var1 var5)) (inv_main15 (write var3 var5 (O_node (node (data (getnode (read var3 var5))) var5 (prev (getnode (read var3 var5)))))) var4 var2 var0 var1 var5))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap) (var5 Int)) (or (not (inv_main39 var4 var5 var2 var3 var1 var0)) (inv_main42 (write var4 var1 (O_node (node var0 (next (getnode (read var4 var1))) (prev (getnode (read var4 var1)))))) var5 var2 var3 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr) (var7 Addr)) (or (not (inv_main22 var3 var4 var2 var0 var1 var7 var6 var5)) (inv_main28 (write var3 var5 (O_node (node (data (getnode (read var3 var5))) var6 (prev (getnode (read var3 var5)))))) var4 var2 var0 var1 var7 var6 var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr)) (or (not (inv_main15 var3 var4 var2 var0 var1 var5)) (inv_main16 (write var3 var5 (O_node (node (data (getnode (read var3 var5))) (next (getnode (read var3 var5))) var5))) var4 var2 var0 var1 var5))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap) (var5 Int)) (or (not (and (inv_main50 var4 var5 var2 var3 var1 var0) (= var0 (data (getnode (read var4 var1)))))) (inv_main51 var4 var5 var2 var3 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Int) (var6 Addr)) (or (not (inv_main12 var3 var4 var2 var0 var1 var6 var5)) (inv_main12 var3 var4 var2 var0 var1 var6 var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap) (var5 Int) (var6 Heap) (var7 Int) (var8 Int) (var9 node)) (or (not (and (inv_main4 var4 var5 var2) (and (= nullAddr var3) (and (and (and (and (and (= var6 (newHeap (alloc var4 (O_node var9)))) (= var0 var5)) (= var1 var2)) (= var7 var5)) (= var8 var2)) (= var3 (newAddr (alloc var4 (O_node var9)))))))) (inv_main12 var6 var0 var1 var7 var8 var3 1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr) (var7 Addr)) (or (not (inv_main28 var3 var4 var2 var0 var1 var7 var6 var5)) (inv_main29 (write var3 var5 (O_node (node var1 (next (getnode (read var3 var5))) (prev (getnode (read var3 var5)))))) var4 var2 var0 var1 var7 var6 var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr)) (or (not (inv_main19 var3 var4 var2 var0 var1 var6 var5)) (inv_main32 (write var3 var6 (O_node (node (data (getnode (read var3 var6))) var5 (prev (getnode (read var3 var6)))))) var4 var2 var0 var1 var6 var5))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap) (var5 Int)) (or (not (and (inv_main36 var4 var5 var2 var3 var1 var0) (= var2 (data (getnode (read var4 var1)))))) (inv_main39 var4 var5 var2 var3 var1 var0))))
(assert (forall ((var0 Int) (var1 node) (var2 Heap) (var3 Int) (var4 Addr) (var5 Addr) (var6 Addr) (var7 Int) (var8 Int) (var9 Int) (var10 Heap) (var11 Addr) (var12 Addr) (var13 Int) (var14 Int) (var15 Int)) (or (not (and (inv_main18 var2 var3 var8 var0 var7 var5 var4) (and (and (not (= nullAddr var6)) (and (and (and (and (and (and (and (= var10 (newHeap (alloc var2 (O_node var1)))) (= var14 var3)) (= var13 var8)) (= var9 var0)) (= var15 var7)) (= var12 var5)) (= var11 var4)) (= var6 (newAddr (alloc var2 (O_node var1)))))) (<= 0 (+ (+ var0 (- 1)) (- 1)))))) (inv_main22 var10 var14 var13 var9 var15 var12 var11 var6))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Addr) (var5 Addr) (var6 Heap) (var7 Int) (var8 Int) (var9 Int) (var10 Addr) (var11 Addr) (var12 Heap)) (or (not (and (inv_main42 var6 var7 var2 var5 var1 var0) (and (= var4 var10) (and (and (and (and (and (and (= var12 var6) (= var9 var7)) (= var8 var2)) (= var10 var5)) (= var11 var1)) (= var3 var0)) (= var4 (next (getnode (read var6 var1)))))))) (inv_main37 var12 var9 var8 var10 var4 (+ var3 1)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr)) (or (not (and (inv_main18 var3 var4 var2 var0 var1 var6 var5) (not (<= 0 (+ (+ var0 (- 1)) (- 1)))))) (inv_main19 var3 var4 var2 var0 var1 var6 var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr) (var7 Int) (var8 Addr)) (or (not (inv_main25 var3 var4 var2 var0 var1 var8 var6 var5 var7)) (inv_main25 var3 var4 var2 var0 var1 var8 var6 var5 var7))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Int) (var3 Int) (var4 Addr) (var5 Int) (var6 Addr) (var7 Addr) (var8 Heap) (var9 node) (var10 Int) (var11 Int) (var12 Addr) (var13 Int) (var14 Addr) (var15 Int)) (or (not (and (inv_main18 var1 var2 var11 var0 var10 var7 var4) (and (and (= nullAddr var12) (and (and (and (and (and (and (and (= var8 (newHeap (alloc var1 (O_node var9)))) (= var5 var2)) (= var13 var11)) (= var15 var0)) (= var3 var10)) (= var6 var7)) (= var14 var4)) (= var12 (newAddr (alloc var1 (O_node var9)))))) (<= 0 (+ (+ var0 (- 1)) (- 1)))))) (inv_main25 var8 var5 var13 var15 var3 var6 var14 var12 1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Heap) (var5 Int) (var6 node) (var7 Addr) (var8 Int) (var9 Int)) (or (not (and (inv_main4 var4 var5 var2) (and (not (= nullAddr var7)) (and (and (and (and (and (= var3 (newHeap (alloc var4 (O_node var6)))) (= var1 var5)) (= var8 var2)) (= var0 var5)) (= var9 var2)) (= var7 (newAddr (alloc var4 (O_node var6)))))))) (inv_main9 var3 var1 var8 var0 var9 var7))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Int) (var5 Addr) (var6 Int) (var7 Int) (var8 Addr) (var9 Int) (var10 Addr) (var11 Int) (var12 Int) (var13 Addr) (var14 Int) (var15 Int) (var16 Addr) (var17 Heap) (var18 Heap)) (or (not (and (inv_main37 var3 var4 var12 var2 var10 var9) (and (and (and (and (and (and (and (= var18 var3) (= var15 var4)) (= var7 var12)) (= var5 var2)) (= var13 var10)) (= var1 var9)) (= var8 (prev (getnode (read var3 var10))))) (and (and (and (and (and (= var17 var18) (= var11 var15)) (= var6 var7)) (= var0 nullAddr)) (= var16 var8)) (= var14 var1))))) (inv_main50 var17 var11 var6 var0 var16 (+ var14 (- 1))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Int) (var5 Heap) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Int) (var10 Int) (var11 Addr) (var12 Int) (var13 Heap) (var14 Int) (var15 Int) (var16 Addr) (var17 Int) (var18 Int) (var19 Int)) (or (not (and (inv_main51 var3 var4 var12 var2 var11 var10) (and (not (= var1 nullAddr)) (and (and (and (and (and (and (and (= var5 var3) (= var18 var4)) (= var17 var12)) (= var7 var2)) (= var8 var11)) (= var14 var10)) (= var6 (prev (getnode (read var3 var11))))) (and (and (and (and (and (and (= var13 (write var5 var8 defObj)) (= var15 var18)) (= var9 var17)) (= var0 var7)) (= var16 var8)) (= var19 var14)) (= var1 var6)))))) (inv_main50 var13 var15 var9 var0 var1 (+ var19 (- 1))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr)) (not (and (inv_main9 var3 var4 var2 var0 var1 var5) (not (is-O_node (read var3 var5)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr)) (not (and (inv_main15 var3 var4 var2 var0 var1 var5) (not (is-O_node (read var3 var5)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr)) (not (and (inv_main16 var3 var4 var2 var0 var1 var5) (not (is-O_node (read var3 var5)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr) (var7 Addr)) (not (and (inv_main22 var3 var4 var2 var0 var1 var7 var6 var5) (not (is-O_node (read var3 var5)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr) (var7 Addr)) (not (and (inv_main28 var3 var4 var2 var0 var1 var7 var6 var5) (not (is-O_node (read var3 var5)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr) (var7 Addr)) (not (and (inv_main29 var3 var4 var2 var0 var1 var7 var6 var5) (not (is-O_node (read var3 var6)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr)) (not (and (inv_main19 var3 var4 var2 var0 var1 var6 var5) (not (is-O_node (read var3 var6)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr)) (not (and (inv_main32 var3 var4 var2 var0 var1 var6 var5) (not (is-O_node (read var3 var5)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap) (var5 Int)) (not (and (inv_main36 var4 var5 var2 var3 var1 var0) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap) (var5 Int)) (not (and (inv_main39 var4 var5 var2 var3 var1 var0) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap) (var5 Int)) (not (and (inv_main42 var4 var5 var2 var3 var1 var0) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap) (var5 Int)) (not (and (inv_main37 var4 var5 var2 var3 var1 var0) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap) (var5 Int)) (not (and (inv_main50 var4 var5 var2 var3 var1 var0) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap) (var5 Int)) (not (and (inv_main51 var4 var5 var2 var3 var1 var0) (not (is-O_node (read var4 var1)))))))
(check-sat)
