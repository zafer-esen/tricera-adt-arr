(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unsat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (next Addr) (data Int)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun defHeapObject    () HeapObject defObj)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(declare-const allDefHeapObject (Array Addr HeapObject))
(define-fun emptyHeap () Heap (HeapCtor 0 allDefHeapObject))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defHeapObject))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))
(define-fun Heap-eq     ((h1 Heap) (h2 Heap)) Bool
  (forall ((p Addr))
          (and (= (valid h1 p) (valid h2 p))
               (= (read h1 p) (read h2 p)))))
;===============================================================================
(declare-fun inv_main12 (Heap Int Int Int Int Addr Int) Bool)
(declare-fun inv_main15 (Heap Int Int Int Int Addr) Bool)
(declare-fun inv_main17 (Heap Int Int Int Int Addr Addr) Bool)
(declare-fun inv_main18 (Heap Int Int Int Int Addr Addr) Bool)
(declare-fun inv_main21 (Heap Int Int Int Int Addr Addr Addr) Bool)
(declare-fun inv_main24 (Heap Int Int Int Int Addr Addr Addr Int) Bool)
(declare-fun inv_main27 (Heap Int Int Int Int Addr Addr Addr) Bool)
(declare-fun inv_main33 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main36 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main39 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main4 (Heap Int Int) Bool)
(declare-fun inv_main42 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main45 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main51 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main9 (Heap Int Int Int Int Addr) Bool)
(assert (forall ((var0 Heap)) (or (not (= var0 emptyHeap)) (inv_main4 var0 5 1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr)) (or (not (and (inv_main17 var3 var4 var2 var0 var1 var6 var5) (not (<= 0 (+ (+ var0 (- 1)) (- 1)))))) (inv_main18 var3 var4 var2 var0 var1 var6 var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Addr) (var5 Addr)) (or (not (and (inv_main33 var2 var3 var0 var5 var1 var4) (not (= var0 (data (getnode (read var2 var4))))))) (inv_main51 var2 var3 var0 var5 var1 var4))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Addr) (var5 Addr)) (or (not (and (inv_main42 var2 var3 var0 var5 var1 var4) (not (= var1 (data (getnode (read var2 var4))))))) (inv_main51 var2 var3 var0 var5 var1 var4))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Addr) (var5 Addr)) (or (not (inv_main36 var2 var3 var0 var5 var1 var4)) (inv_main39 (write var2 var4 (O_node (node (next (getnode (read var2 var4))) var1))) var3 var0 var5 var1 var4))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr)) (or (not (inv_main9 var3 var4 var2 var0 var1 var5)) (inv_main15 (write var3 var5 (O_node (node var5 (data (getnode (read var3 var5)))))) var4 var2 var0 var1 var5))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Int) (var4 Heap) (var5 Int) (var6 Int) (var7 Addr) (var8 Addr) (var9 Int) (var10 Addr) (var11 Addr) (var12 Int)) (or (not (and (inv_main39 var4 var5 var0 var11 var3 var10) (and (= var8 var7) (and (and (and (and (and (and (= var2 var4) (= var9 var5)) (= var12 var0)) (= var7 var11)) (= var6 var3)) (= var1 var10)) (= var8 (next (getnode (read var4 var10)))))))) (inv_main42 var2 var9 var12 var7 (+ (+ var6 1) (* (- 1) var9)) var8))))
(assert (forall ((var0 Heap) (var1 Int) (var2 Heap) (var3 Int) (var4 Int) (var5 Addr) (var6 Int) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Addr) (var11 Addr) (var12 Int) (var13 Int) (var14 Heap) (var15 Int) (var16 Addr) (var17 Addr) (var18 Int) (var19 Int)) (or (not (and (inv_main45 var2 var3 var12 var16 var1 var7) (and (not (= var17 nullAddr)) (and (and (and (and (and (and (and (= var14 var2) (= var19 var3)) (= var15 var12)) (= var10 var16)) (= var4 var1)) (= var5 var7)) (= var11 (next (getnode (read var2 var7))))) (and (and (and (and (and (and (= var0 (write var14 var5 defObj)) (= var13 var19)) (= var6 var15)) (= var9 var10)) (= var18 var4)) (= var8 var5)) (= var17 var11)))))) (inv_main42 var0 var13 var6 var9 (+ var18 1) var17))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Int) (var4 Heap) (var5 Int) (var6 Int) (var7 Addr) (var8 Addr) (var9 Int) (var10 Addr) (var11 Addr) (var12 Int)) (or (not (and (inv_main39 var4 var5 var0 var11 var3 var10) (and (not (= var8 var7)) (and (and (and (and (and (and (= var2 var4) (= var9 var5)) (= var12 var0)) (= var7 var11)) (= var6 var3)) (= var1 var10)) (= var8 (next (getnode (read var4 var10)))))))) (inv_main33 var2 var9 var12 var7 (+ var6 1) var8))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Int) (var4 Int) (var5 Addr) (var6 Addr) (var7 Int) (var8 Int) (var9 Int) (var10 Int) (var11 Heap) (var12 Addr) (var13 Int)) (or (not (and (inv_main18 var2 var3 var8 var0 var7 var6 var5) (and (and (and (and (and (and (= var11 (write var2 var6 (O_node (node var5 (data (getnode (read var2 var6))))))) (= var13 var3)) (= var4 var8)) (= var9 var0)) (= var10 var7)) (= var1 var6)) (= var12 var5)))) (inv_main33 var11 var13 var4 var12 1 var12))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Heap) (var5 Int) (var6 Addr) (var7 Addr) (var8 Addr)) (or (not (inv_main24 var4 var5 var2 var0 var1 var8 var7 var6 var3)) (inv_main24 var4 var5 var2 var0 var1 var8 var7 var6 var3))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Int) (var3 node) (var4 Int) (var5 Addr) (var6 Addr) (var7 Int) (var8 Addr) (var9 Addr) (var10 Int) (var11 Int) (var12 Int) (var13 Heap) (var14 Addr) (var15 Int)) (or (not (and (inv_main17 var1 var2 var11 var0 var10 var8 var5) (and (and (= nullAddr var9) (and (and (and (and (and (and (and (= var13 (newHeap (alloc var1 (O_node var3)))) (= var7 var2)) (= var4 var11)) (= var15 var0)) (= var12 var10)) (= var6 var8)) (= var14 var5)) (= var9 (newAddr (alloc var1 (O_node var3)))))) (<= 0 (+ (+ var0 (- 1)) (- 1)))))) (inv_main24 var13 var7 var4 var15 var12 var6 var14 var9 1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Addr) (var5 Addr)) (or (not (and (inv_main33 var2 var3 var0 var5 var1 var4) (= var0 (data (getnode (read var2 var4)))))) (inv_main36 var2 var3 var0 var5 var1 var4))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Int) (var6 Addr)) (or (not (inv_main12 var3 var4 var2 var0 var1 var6 var5)) (inv_main12 var3 var4 var2 var0 var1 var6 var5))))
(assert (forall ((var0 node) (var1 Int) (var2 Int) (var3 Int) (var4 Heap) (var5 Int) (var6 Addr) (var7 Int) (var8 Heap) (var9 Int)) (or (not (and (inv_main4 var4 var5 var2) (and (= nullAddr var6) (and (and (and (and (and (= var8 (newHeap (alloc var4 (O_node var0)))) (= var1 var5)) (= var9 var2)) (= var3 var5)) (= var7 var2)) (= var6 (newAddr (alloc var4 (O_node var0)))))))) (inv_main12 var8 var1 var9 var3 var7 var6 1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Addr) (var5 Addr)) (or (not (and (inv_main42 var2 var3 var0 var5 var1 var4) (= var1 (data (getnode (read var2 var4)))))) (inv_main45 var2 var3 var0 var5 var1 var4))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Int) (var5 Heap) (var6 Int) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Int) (var11 Int) (var12 Int) (var13 Heap) (var14 Addr) (var15 Int)) (or (not (and (inv_main27 var5 var6 var11 var0 var10 var8 var7 var14) (and (and (and (and (and (and (and (= var13 (write var5 var14 (O_node (node (next (getnode (read var5 var14))) var10)))) (= var4 var6)) (= var1 var11)) (= var12 var0)) (= var15 var10)) (= var9 var8)) (= var3 var7)) (= var2 var14)))) (inv_main17 var13 var4 var1 (+ var12 (- 1)) var15 var9 var2))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Heap) (var5 Heap) (var6 Int) (var7 Int) (var8 Int) (var9 Addr) (var10 Int) (var11 Addr)) (or (not (and (inv_main15 var5 var6 var2 var0 var1 var11) (and (and (and (and (and (= var4 (write var5 var11 (O_node (node (next (getnode (read var5 var11))) var1)))) (= var8 var6)) (= var3 var2)) (= var7 var0)) (= var10 var1)) (= var9 var11)))) (inv_main17 var4 var8 var3 var7 var10 var9 var9))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Heap) (var4 Int) (var5 node) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Int) (var10 Int) (var11 Int) (var12 Int) (var13 Int) (var14 Heap) (var15 Addr)) (or (not (and (inv_main17 var3 var4 var10 var0 var9 var7 var6) (and (and (not (= nullAddr var8)) (and (and (and (and (and (and (and (= var14 (newHeap (alloc var3 (O_node var5)))) (= var1 var4)) (= var13 var10)) (= var12 var0)) (= var11 var9)) (= var2 var7)) (= var15 var6)) (= var8 (newAddr (alloc var3 (O_node var5)))))) (<= 0 (+ (+ var0 (- 1)) (- 1)))))) (inv_main21 var14 var1 var13 var12 var11 var2 var15 var8))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr) (var7 Addr)) (or (not (inv_main21 var3 var4 var2 var0 var1 var7 var6 var5)) (inv_main27 (write var3 var5 (O_node (node var6 (data (getnode (read var3 var5)))))) var4 var2 var0 var1 var7 var6 var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Int) (var4 Int) (var5 Heap) (var6 Int) (var7 Int) (var8 Heap) (var9 node)) (or (not (and (inv_main4 var5 var6 var3) (and (not (= nullAddr var2)) (and (and (and (and (and (= var8 (newHeap (alloc var5 (O_node var9)))) (= var7 var6)) (= var0 var3)) (= var1 var6)) (= var4 var3)) (= var2 (newAddr (alloc var5 (O_node var9)))))))) (inv_main9 var8 var7 var0 var1 var4 var2))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr)) (not (and (inv_main9 var3 var4 var2 var0 var1 var5) (not (is-O_node (read var3 var5)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr)) (not (and (inv_main15 var3 var4 var2 var0 var1 var5) (not (is-O_node (read var3 var5)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr) (var7 Addr)) (not (and (inv_main21 var3 var4 var2 var0 var1 var7 var6 var5) (not (is-O_node (read var3 var5)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr) (var7 Addr)) (not (and (inv_main27 var3 var4 var2 var0 var1 var7 var6 var5) (not (is-O_node (read var3 var5)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr)) (not (and (inv_main18 var3 var4 var2 var0 var1 var6 var5) (not (is-O_node (read var3 var6)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Addr) (var5 Addr)) (not (and (inv_main33 var2 var3 var0 var5 var1 var4) (not (is-O_node (read var2 var4)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Addr) (var5 Addr)) (not (and (inv_main36 var2 var3 var0 var5 var1 var4) (not (is-O_node (read var2 var4)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Addr) (var5 Addr)) (not (and (inv_main39 var2 var3 var0 var5 var1 var4) (not (is-O_node (read var2 var4)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Addr) (var5 Addr)) (not (and (inv_main42 var2 var3 var0 var5 var1 var4) (not (is-O_node (read var2 var4)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Addr) (var5 Addr)) (not (and (inv_main45 var2 var3 var0 var5 var1 var4) (not (is-O_node (read var2 var4)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Addr) (var5 Addr)) (not (inv_main51 var2 var3 var0 var5 var1 var4))))
(check-sat)
