(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_UInt (getUInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (next Addr) (stock Int) (order Int)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defObj)))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defObj))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))

;===============================================================================
(declare-fun inv_main12 (Heap Addr Int Addr) Bool)
(declare-fun inv_main13 (Heap Addr Int Addr) Bool)
(declare-fun inv_main14 (Heap Addr Int Addr) Bool)
(declare-fun inv_main16 (Heap Addr Addr) Bool)
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main20 (Heap Addr Addr Int) Bool)
(declare-fun inv_main21 (Heap Addr Addr Int) Bool)
(declare-fun inv_main26 (Heap Addr Addr Int) Bool)
(declare-fun inv_main27 (Heap Addr Addr Int) Bool)
(declare-fun inv_main28 (Heap Addr Addr Int Int) Bool)
(declare-fun inv_main3 (Heap Addr) Bool)
(declare-fun inv_main31 (Heap Addr Addr) Bool)
(declare-fun inv_main32 (Heap Addr Addr) Bool)
(declare-fun inv_main33 (Heap Addr Addr) Bool)
(declare-fun inv_main35 (Heap Addr Addr Int) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap)) (or (not (and (inv_main21 var3 var2 var1 var0) (is-O_node (read var3 var1)))) (inv_main26 (write var3 var1 (O_node (node (next (getnode (read var3 var1))) (stock (getnode (read var3 var1))) var0))) var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap)) (or (not (and (inv_main12 var3 var2 var1 var0) (is-O_node (read var3 var0)))) (inv_main13 (write var3 var0 (O_node (node (next (getnode (read var3 var0))) var1 (order (getnode (read var3 var0)))))) var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap)) (or (not (inv_main33 var2 var1 var0)) (inv_main32 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap)) (or (not (and (inv_main35 var3 var2 var1 var0) (and (is-O_node (read var3 var1)) (not (<= 0 (+ (+ var0 (* (- 1) (stock (getnode (read var3 var1))))) (- 1))))))) (inv_main32 var3 var2 var1))))
(assert (forall ((var0 Heap)) (or (not (inv_main2 var0)) (inv_main3 var0 nullAddr))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Int) (var6 Addr) (var7 Heap)) (or (not (and (inv_main14 var7 var6 var5 var4) (and (is-O_node (read var7 var4)) (and (and (and (= var3 (write var7 var4 (O_node (node var6 (stock (getnode (read var7 var4))) (order (getnode (read var7 var4))))))) (= var2 var6)) (= var1 var5)) (= var0 var4))))) (inv_main3 var3 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Heap)) (or (not (and (inv_main3 var3 var2) (and (<= 0 (+ (* (- 1) var1) (- 1))) (not (= var0 0))))) (inv_main3 var3 var2))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Heap)) (or (not (and (inv_main28 var4 var3 var2 var1 var0) (is-O_node (read var4 var2)))) (inv_main27 (write var4 var2 (O_node (node (next (getnode (read var4 var2))) var0 (order (getnode (read var4 var2)))))) var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap)) (or (not (and (inv_main16 var3 var2 var1) (not (= var1 nullAddr)))) (inv_main20 var3 var2 var1 var0))))
(assert (forall ((var0 node) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap)) (or (not (and (inv_main3 var4 var3) (and (not (<= 0 (+ (* (- 1) var2) (- 1)))) (not (= var1 0))))) (inv_main12 (newHeap (alloc var4 (O_node var0))) var3 var2 (newAddr (alloc var4 (O_node var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Heap)) (or (not (and (inv_main32 var6 var5 var4) (and (not (= var3 nullAddr)) (and (is-O_node (read var6 var4)) (and (and (and (= var2 var6) (= var1 var5)) (= var0 var4)) (= var3 (next (getnode (read var6 var4))))))))) (inv_main31 var2 var1 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap)) (or (not (and (inv_main16 var2 var1 var0) (and (not (= var1 nullAddr)) (= var0 nullAddr)))) (inv_main31 var2 var1 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Addr) (var4 Heap) (var5 Int) (var6 Addr) (var7 Addr) (var8 Heap)) (or (not (and (inv_main27 var8 var7 var6 var5) (and (is-O_node (read var8 var6)) (and (and (and (and (= var4 var8) (= var3 var7)) (= var2 var6)) (= var1 var5)) (= var0 (next (getnode (read var8 var6)))))))) (inv_main16 var4 var3 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap)) (or (not (and (inv_main20 var3 var2 var1 var0) (<= 0 (+ (* (- 1) var0) (- 1))))) (inv_main16 var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Int) (var5 Int) (var6 Addr) (var7 Addr) (var8 Heap) (var9 Int) (var10 Int) (var11 Addr) (var12 Addr) (var13 Heap)) (or (not (and (inv_main20 var13 var12 var11 var10) (and (and (not (= var9 0)) (and (and (not (<= 0 (+ (* (- 1) var10) (- 1)))) (is-O_node (read var13 var11))) (and (and (and (and (= var8 var13) (= var7 var12)) (= var6 var11)) (= var5 var10)) (= var4 (stock (getnode (read var13 var11))))))) (and (and (and (and (= var3 var8) (= var2 var7)) (= var1 var6)) (= var0 var5)) (or (and (<= 0 (+ (+ var5 (* (- 1) var4)) (- 1))) (= var9 1)) (and (not (<= 0 (+ (+ var5 (* (- 1) var4)) (- 1)))) (= var9 0))))))) (inv_main16 var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap)) (or (not (and (inv_main3 var2 var1) (= var0 0))) (inv_main16 var2 var1 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap)) (or (not (and (inv_main13 var3 var2 var1 var0) (is-O_node (read var3 var0)))) (inv_main14 (write var3 var0 (O_node (node (next (getnode (read var3 var0))) (stock (getnode (read var3 var0))) 0))) var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap)) (or (not (and (inv_main35 var3 var2 var1 var0) (and (is-O_node (read var3 var1)) (<= 0 (+ (+ var0 (* (- 1) (stock (getnode (read var3 var1))))) (- 1)))))) (inv_main33 var3 var2 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap)) (or (not (and (inv_main31 var2 var1 var0) (is-O_node (read var2 var0)))) (inv_main35 var2 var1 var0 (order (getnode (read var2 var0)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Int) (var5 Int) (var6 Addr) (var7 Addr) (var8 Heap) (var9 Int) (var10 Int) (var11 Addr) (var12 Addr) (var13 Heap)) (or (not (and (inv_main20 var13 var12 var11 var10) (and (and (= var9 0) (and (and (not (<= 0 (+ (* (- 1) var10) (- 1)))) (is-O_node (read var13 var11))) (and (and (and (and (= var8 var13) (= var7 var12)) (= var6 var11)) (= var5 var10)) (= var4 (stock (getnode (read var13 var11))))))) (and (and (and (and (= var3 var8) (= var2 var7)) (= var1 var6)) (= var0 var5)) (or (and (<= 0 (+ (+ var5 (* (- 1) var4)) (- 1))) (= var9 1)) (and (not (<= 0 (+ (+ var5 (* (- 1) var4)) (- 1)))) (= var9 0))))))) (inv_main21 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap)) (or (not (and (inv_main26 var3 var2 var1 var0) (is-O_node (read var3 var1)))) (inv_main28 var3 var2 var1 var0 (stock (getnode (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap)) (not (and (inv_main12 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap)) (not (and (inv_main13 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap)) (not (and (inv_main14 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main20 var3 var2 var1 var0) (and (not (<= 0 (+ (* (- 1) var0) (- 1)))) (not (is-O_node (read var3 var1))))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main21 var3 var2 var1 var0) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main26 var3 var2 var1 var0) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (inv_main28 var4 var3 var2 var1 var0) (not (is-O_node (read var4 var2)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main27 var3 var2 var1 var0) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap)) (not (and (inv_main31 var2 var1 var0) (not (is-O_node (read var2 var0)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main35 var3 var2 var1 var0) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap)) (not (inv_main33 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap)) (not (and (inv_main32 var2 var1 var0) (not (is-O_node (read var2 var0)))))))
(check-sat)
