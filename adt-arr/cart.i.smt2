(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unknown)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (next Addr) (stock Int) (order Int)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun defHeapObject    () HeapObject defObj)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defHeapObject)))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defHeapObject))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))

;===============================================================================
(declare-fun inv_main12 (Heap Addr Int Addr) Bool)
(declare-fun inv_main13 (Heap Addr Int Addr) Bool)
(declare-fun inv_main14 (Heap Addr Int Addr) Bool)
(declare-fun inv_main16 (Heap Addr Addr) Bool)
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main20 (Heap Addr Addr Int) Bool)
(declare-fun inv_main21 (Heap Addr Addr Int) Bool)
(declare-fun inv_main26 (Heap Addr Addr Int) Bool)
(declare-fun inv_main27 (Heap Addr Addr Int) Bool)
(declare-fun inv_main28 (Heap Addr Addr Int Int) Bool)
(declare-fun inv_main3 (Heap Addr) Bool)
(declare-fun inv_main31 (Heap Addr Addr) Bool)
(declare-fun inv_main32 (Heap Addr Addr) Bool)
(declare-fun inv_main33 (Heap Addr Addr) Bool)
(declare-fun inv_main35 (Heap Addr Addr Int) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Addr)) (or (not (and (inv_main32 var2 var4 var5) (and (not (= var3 nullAddr)) (and (and (and (= var1 var2) (= var0 var4)) (= var6 var5)) (= var3 (next (getnode (read var2 var5)))))))) (inv_main31 var1 var0 var3))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr)) (or (not (and (inv_main16 var0 var1 var2) (and (not (= var1 nullAddr)) (= var2 nullAddr)))) (inv_main31 var0 var1 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Heap) (var4 Addr) (var5 Int) (var6 Heap) (var7 Int) (var8 Addr) (var9 Int) (var10 Addr) (var11 Addr) (var12 Addr) (var13 Addr)) (or (not (and (inv_main20 var6 var12 var13 var9) (and (and (= var1 0) (and (not (<= 0 (+ (* (- 1) var9) (- 1)))) (and (and (and (and (= var2 var6) (= var8 var12)) (= var4 var13)) (= var7 var9)) (= var5 (stock (getnode (read var6 var13))))))) (and (and (and (and (= var3 var2) (= var11 var8)) (= var10 var4)) (= var0 var7)) (or (and (<= 0 (+ (+ var7 (* (- 1) var5)) (- 1))) (= var1 1)) (and (not (<= 0 (+ (+ var7 (* (- 1) var5)) (- 1)))) (= var1 0))))))) (inv_main21 var3 var11 var10 var0))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr)) (or (not (inv_main33 var0 var1 var2)) (inv_main32 var0 var1 var2))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr)) (or (not (and (inv_main35 var1 var2 var3 var0) (not (<= 0 (+ (+ var0 (* (- 1) (stock (getnode (read var1 var3))))) (- 1)))))) (inv_main32 var1 var2 var3))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr)) (or (not (inv_main21 var1 var2 var3 var0)) (inv_main26 (write var1 var3 (O_node (node (next (getnode (read var1 var3))) (stock (getnode (read var1 var3))) var0))) var2 var3 var0))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr)) (or (not (inv_main26 var1 var2 var3 var0)) (inv_main28 var1 var2 var3 var0 (stock (getnode (read var1 var3)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr)) (or (not (inv_main31 var0 var1 var2)) (inv_main35 var0 var1 var2 (order (getnode (read var0 var2)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 node) (var4 Addr)) (or (not (and (inv_main3 var2 var4) (and (not (<= 0 (+ (* (- 1) var1) (- 1)))) (not (= var0 0))))) (inv_main12 (newHeap (alloc var2 (O_node var3))) var4 var1 (newAddr (alloc var2 (O_node var3)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Addr) (var7 Addr) (var8 Int)) (or (not (and (inv_main27 var4 var6 var7 var0) (and (and (and (and (= var2 var4) (= var1 var6)) (= var5 var7)) (= var8 var0)) (= var3 (next (getnode (read var4 var7))))))) (inv_main16 var2 var1 var3))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr)) (or (not (and (inv_main20 var1 var2 var3 var0) (<= 0 (+ (* (- 1) var0) (- 1))))) (inv_main16 var1 var2 var3))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Heap) (var3 Addr) (var4 Int) (var5 Heap) (var6 Int) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Int) (var11 Int) (var12 Addr) (var13 Addr)) (or (not (and (inv_main20 var5 var12 var13 var10) (and (and (not (= var11 0)) (and (not (<= 0 (+ (* (- 1) var10) (- 1)))) (and (and (and (and (= var1 var5) (= var9 var12)) (= var3 var13)) (= var6 var10)) (= var4 (stock (getnode (read var5 var13))))))) (and (and (and (and (= var2 var1) (= var7 var9)) (= var8 var3)) (= var0 var6)) (or (and (<= 0 (+ (+ var6 (* (- 1) var4)) (- 1))) (= var11 1)) (and (not (<= 0 (+ (+ var6 (* (- 1) var4)) (- 1)))) (= var11 0))))))) (inv_main16 var2 var7 var8))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int)) (or (not (and (inv_main3 var0 var1) (= var2 0))) (inv_main16 var0 var1 var1))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr)) (or (not (and (inv_main16 var1 var2 var3) (not (= var3 nullAddr)))) (inv_main20 var1 var2 var3 var0))))
(assert (forall ((var0 Heap)) (or (not (inv_main2 var0)) (inv_main3 var0 nullAddr))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Addr)) (or (not (and (inv_main14 var5 var7 var3 var4) (and (and (and (= var0 (write var5 var4 (O_node (node var7 (stock (getnode (read var5 var4))) (order (getnode (read var5 var4))))))) (= var6 var7)) (= var2 var3)) (= var1 var4)))) (inv_main3 var0 var1))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Int) (var3 Addr)) (or (not (and (inv_main3 var1 var3) (and (<= 0 (+ (* (- 1) var2) (- 1))) (not (= var0 0))))) (inv_main3 var1 var3))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Addr)) (or (not (inv_main13 var2 var3 var0 var1)) (inv_main14 (write var2 var1 (O_node (node (next (getnode (read var2 var1))) (stock (getnode (read var2 var1))) 0))) var3 var0 var1))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr)) (or (not (and (inv_main35 var1 var2 var3 var0) (<= 0 (+ (+ var0 (* (- 1) (stock (getnode (read var1 var3))))) (- 1))))) (inv_main33 var1 var2 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Addr) (var4 Addr)) (or (not (inv_main28 var2 var3 var4 var1 var0)) (inv_main27 (write var2 var4 (O_node (node (next (getnode (read var2 var4))) var0 (order (getnode (read var2 var4)))))) var3 var4 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Addr)) (or (not (inv_main12 var2 var3 var0 var1)) (inv_main13 (write var2 var1 (O_node (node (next (getnode (read var2 var1))) var0 (order (getnode (read var2 var1)))))) var3 var0 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Addr)) (not (and (inv_main12 var2 var3 var0 var1) (not (is-O_node (read var2 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Addr)) (not (and (inv_main13 var2 var3 var0 var1) (not (is-O_node (read var2 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Addr)) (not (and (inv_main14 var2 var3 var0 var1) (not (is-O_node (read var2 var1)))))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr)) (not (and (inv_main20 var1 var2 var3 var0) (and (not (<= 0 (+ (* (- 1) var0) (- 1)))) (not (is-O_node (read var1 var3))))))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr)) (not (and (inv_main21 var1 var2 var3 var0) (not (is-O_node (read var1 var3)))))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr)) (not (and (inv_main26 var1 var2 var3 var0) (not (is-O_node (read var1 var3)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Addr) (var4 Addr)) (not (and (inv_main28 var2 var3 var4 var1 var0) (not (is-O_node (read var2 var4)))))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr)) (not (and (inv_main27 var1 var2 var3 var0) (not (is-O_node (read var1 var3)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr)) (not (and (inv_main31 var0 var1 var2) (not (is-O_node (read var0 var2)))))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr)) (not (and (inv_main35 var1 var2 var3 var0) (not (is-O_node (read var1 var3)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr)) (not (inv_main33 var0 var1 var2))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr)) (not (and (inv_main32 var0 var1 var2) (not (is-O_node (read var0 var2)))))))
(check-sat)
