(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (data Int) (next Addr)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defObj)))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defObj))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))

;===============================================================================
(declare-fun inv_main10 (Heap Int Int Int Int Addr) Bool)
(declare-fun inv_main17 (Heap Int Int Int Int Addr Int Addr) Bool)
(declare-fun inv_main20 (Heap Int Int Int Int Addr Int Addr Int) Bool)
(declare-fun inv_main23 (Heap Int Int Int Int Addr Int Addr) Bool)
(declare-fun inv_main25 (Heap Int Int Int Int Addr Addr) Bool)
(declare-fun inv_main30 (Heap Int Int Addr Int) Bool)
(declare-fun inv_main37 (Heap Int Int Addr Int Int Addr Int Int) Bool)
(declare-fun inv_main38 (Heap Int Int Addr Int Int Addr Int Int) Bool)
(declare-fun inv_main4 (Heap Int Int) Bool)
(declare-fun inv_main42 (Heap Int Int Addr Int) Bool)
(declare-fun inv_main51 (Heap Int Int Addr Int Int Addr Int) Bool)
(declare-fun inv_main52 (Heap Int Int Addr Int Int Addr Int) Bool)
(declare-fun inv_main59 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main62 (Heap Int Int Addr Int) Bool)
(assert (forall ((var0 Heap)) (or (not (= var0 emptyHeap)) (inv_main4 var0 2 1))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int) (var3 Int) (var4 Addr) (var5 Int) (var6 Int) (var7 Int)) (or (not (inv_main17 var0 var7 var6 var5 var2 var4 var3 var1)) (inv_main23 (write var0 var1 (O_node (node (data (getnode (read var0 var1))) nullAddr))) var7 var6 var5 var2 var4 var3 var1))))
(assert (forall ((var0 Heap) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Int) (var7 Heap) (var8 Int) (var9 Int) (var10 Int) (var11 Addr) (var12 Addr) (var13 Addr) (var14 Addr) (var15 Int) (var16 Int) (var17 Addr) (var18 Addr) (var19 Int)) (or (not (and (inv_main59 var4 var8 var6 var11 var15 var12) (and (not (= var17 nullAddr)) (and (and (and (and (and (and (and (= var7 var4) (= var9 var8)) (= var19 var6)) (= var14 var11)) (= var10 var15)) (= var5 var12)) (= var18 (next (getnode (read var4 var12))))) (and (and (and (and (and (and (= var0 (write var7 var5 defObj)) (= var1 var9)) (= var16 var19)) (= var3 var14)) (= var2 var10)) (= var13 var5)) (= var17 var18)))))) (inv_main59 var0 var1 var16 var3 var2 var17))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (inv_main42 var1 var4 var3 var0 var2) (and (not (= var0 nullAddr)) (not (<= 0 (+ (+ var4 (* (- 1) var2)) (- 1))))))) (inv_main59 var1 var4 var3 var0 var2 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Int) (var5 Addr) (var6 Int) (var7 Heap) (var8 Int) (var9 Addr) (var10 Addr) (var11 Int) (var12 Int) (var13 Addr) (var14 Int) (var15 Addr) (var16 Int)) (or (not (and (inv_main52 var2 var8 var6 var9 var14 var0 var10 var12) (and (<= 0 (+ (+ var16 (- 1)) (- 1))) (and (and (and (and (and (and (and (and (= var7 var2) (= var4 var8)) (= var3 var6)) (= var13 var9)) (= var1 var14)) (= var11 var0)) (= var15 var10)) (= var16 var12)) (= var5 (next (getnode (read var2 var10)))))))) (inv_main52 var7 var4 var3 var13 var1 var11 var5 (+ var16 (- 1))))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (inv_main42 var1 var4 var3 var0 var2) (and (<= 0 (+ var2 (- 1))) (<= 0 (+ (+ var4 (* (- 1) var2)) (- 1)))))) (inv_main52 var1 var4 var3 var0 var2 (+ var2 var4) var0 var2))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (inv_main30 var1 var4 var3 var0 var2) (not (<= 0 (+ (+ var4 (* (- 1) var2)) (- 1)))))) (inv_main42 var1 var4 var3 var0 0))))
(assert (forall ((var0 Heap) (var1 Int) (var2 Heap) (var3 Int) (var4 Int) (var5 Int) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Int) (var10 Int) (var11 Int) (var12 Int) (var13 Int) (var14 Int)) (or (not (and (inv_main51 var2 var5 var4 var6 var13 var1 var7 var11) (and (= var14 var9) (and (and (and (and (and (and (= var0 var2) (= var3 var5)) (= var10 var4)) (= var8 var6)) (= var12 var13)) (= var14 var1)) (= var9 (data (getnode (read var2 var7)))))))) (inv_main42 var0 var3 var10 var8 (+ var12 1)))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Int) (var8 Int) (var9 Int) (var10 Int) (var11 Addr) (var12 Int) (var13 Addr) (var14 Heap) (var15 Int) (var16 Int) (var17 Addr) (var18 Int)) (or (not (and (inv_main38 var2 var8 var6 var11 var15 var4 var13 var16 var18) (and (not (<= 0 (+ (+ var12 (- 1)) (- 1)))) (and (and (and (and (and (and (and (and (and (= var14 var2) (= var9 var8)) (= var7 var6)) (= var3 var11)) (= var10 var15)) (= var5 var4)) (= var1 var13)) (= var0 var16)) (= var12 var18)) (= var17 (next (getnode (read var2 var13)))))))) (inv_main37 var14 var9 var7 var3 var10 var5 var17 var0 (+ var12 (- 1))))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (inv_main30 var1 var4 var3 var0 var2) (and (not (<= 0 (+ var2 (- 1)))) (<= 0 (+ (+ var4 (* (- 1) var2)) (- 1)))))) (inv_main37 var1 var4 var3 var0 var2 (+ var2 var4) var0 (+ var2 var4) var2))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Addr) (var8 Addr) (var9 Int) (var10 Int) (var11 Int) (var12 Heap) (var13 Addr) (var14 Int) (var15 Int) (var16 Int) (var17 Int)) (or (not (and (inv_main37 var2 var6 var4 var7 var11 var3 var8 var15 var17) (and (and (and (and (and (and (and (and (= var12 (write var2 var8 (O_node (node var15 (next (getnode (read var2 var8))))))) (= var16 var6)) (= var5 var4)) (= var13 var7)) (= var9 var11)) (= var10 var3)) (= var0 var8)) (= var1 var15)) (= var14 var17)))) (inv_main30 var12 var16 var5 var13 (+ var9 1)))))
(assert (forall ((var0 Heap) (var1 Int) (var2 Addr) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main10 var0 var5 var4 var3 var1 var2) (not (<= 0 (+ var3 (- 1)))))) (inv_main30 var0 var5 var4 var2 0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Heap) (var5 Int) (var6 Heap) (var7 Int) (var8 Int) (var9 Addr) (var10 Int) (var11 Addr) (var12 Addr) (var13 Int) (var14 Int)) (or (not (and (inv_main51 var4 var7 var5 var9 var14 var3 var12 var13) (and (not (= var8 var0)) (and (and (and (and (and (and (= var6 var4) (= var2 var7)) (= var1 var5)) (= var11 var9)) (= var10 var14)) (= var8 var3)) (= var0 (data (getnode (read var4 var12)))))))) (inv_main62 var6 var2 var1 var11 var10))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Heap) (var3 Int) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Int) (var9 Int) (var10 Addr) (var11 Int) (var12 Addr) (var13 Int)) (or (not (and (inv_main25 var1 var7 var6 var5 var3 var4 var12) (and (and (and (and (and (and (= var2 (write var1 var12 (O_node (node (data (getnode (read var1 var12))) var4)))) (= var13 var7)) (= var9 var6)) (= var11 var5)) (= var8 var3)) (= var10 var4)) (= var0 var12)))) (inv_main10 var2 var13 var9 (+ var11 (- 1)) var8 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Heap) (var4 Heap) (var5 Int) (var6 Int) (var7 Int) (var8 Int)) (or (not (and (inv_main4 var3 var8 var6) (and (and (and (and (and (= var4 var3) (= var1 var8)) (= var7 var6)) (= var0 var8)) (= var5 var6)) (= var2 nullAddr)))) (inv_main10 var4 var1 var7 var0 var5 var2))))
(assert (forall ((var0 Heap) (var1 Int) (var2 Addr) (var3 Int) (var4 Int) (var5 Addr) (var6 Int) (var7 Int) (var8 Int)) (or (not (inv_main20 var0 var8 var7 var6 var3 var5 var4 var2 var1)) (inv_main20 var0 var8 var7 var6 var3 var5 var4 var2 var1))))
(assert (forall ((var0 Int) (var1 node) (var2 Heap) (var3 Heap) (var4 Addr) (var5 Int) (var6 Addr) (var7 Int) (var8 Int) (var9 Addr) (var10 Int) (var11 Int) (var12 Int) (var13 Int) (var14 Int)) (or (not (and (inv_main10 var2 var11 var8 var7 var5 var6) (and (and (= nullAddr var9) (and (and (and (and (and (and (and (= var3 (newHeap (alloc var2 (O_node var1)))) (= var13 var11)) (= var0 var8)) (= var12 var7)) (= var10 var5)) (= var4 var6)) (= var14 var5)) (= var9 (newAddr (alloc var2 (O_node var1)))))) (<= 0 (+ var7 (- 1)))))) (inv_main20 var3 var13 var0 var12 var10 var4 var14 var9 1))))
(assert (forall ((var0 Int) (var1 node) (var2 Int) (var3 Heap) (var4 Int) (var5 Addr) (var6 Int) (var7 Int) (var8 Int) (var9 Int) (var10 Addr) (var11 Heap) (var12 Addr) (var13 Int) (var14 Int)) (or (not (and (inv_main10 var3 var8 var7 var6 var4 var5) (and (and (not (= nullAddr var12)) (and (and (and (and (and (and (and (= var11 (newHeap (alloc var3 (O_node var1)))) (= var13 var8)) (= var9 var7)) (= var0 var6)) (= var2 var4)) (= var10 var5)) (= var14 var4)) (= var12 (newAddr (alloc var3 (O_node var1)))))) (<= 0 (+ var6 (- 1)))))) (inv_main17 var11 var13 var9 var0 var2 var10 var14 var12))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Int) (var8 Int) (var9 Int) (var10 Int) (var11 Addr) (var12 Int) (var13 Addr) (var14 Heap) (var15 Int) (var16 Int) (var17 Addr) (var18 Int)) (or (not (and (inv_main38 var2 var8 var6 var11 var15 var4 var13 var16 var18) (and (<= 0 (+ (+ var12 (- 1)) (- 1))) (and (and (and (and (and (and (and (and (and (= var14 var2) (= var9 var8)) (= var7 var6)) (= var3 var11)) (= var10 var15)) (= var5 var4)) (= var1 var13)) (= var0 var16)) (= var12 var18)) (= var17 (next (getnode (read var2 var13)))))))) (inv_main38 var14 var9 var7 var3 var10 var5 var17 var0 (+ var12 (- 1))))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (inv_main30 var1 var4 var3 var0 var2) (and (<= 0 (+ var2 (- 1))) (<= 0 (+ (+ var4 (* (- 1) var2)) (- 1)))))) (inv_main38 var1 var4 var3 var0 var2 (+ var2 var4) var0 (+ var2 var4) var2))))
(assert (forall ((var0 Int) (var1 Int) (var2 Heap) (var3 Int) (var4 Int) (var5 Addr) (var6 Int) (var7 Heap) (var8 Int) (var9 Addr) (var10 Addr) (var11 Int) (var12 Int) (var13 Addr) (var14 Int) (var15 Addr) (var16 Int)) (or (not (and (inv_main52 var2 var8 var6 var9 var14 var0 var10 var12) (and (not (<= 0 (+ (+ var16 (- 1)) (- 1)))) (and (and (and (and (and (and (and (and (= var7 var2) (= var4 var8)) (= var3 var6)) (= var13 var9)) (= var1 var14)) (= var11 var0)) (= var15 var10)) (= var16 var12)) (= var5 (next (getnode (read var2 var10)))))))) (inv_main51 var7 var4 var3 var13 var1 var11 var5 (+ var16 (- 1))))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (inv_main42 var1 var4 var3 var0 var2) (and (not (<= 0 (+ var2 (- 1)))) (<= 0 (+ (+ var4 (* (- 1) var2)) (- 1)))))) (inv_main51 var1 var4 var3 var0 var2 (+ var2 var4) var0 var2))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Addr) (var8 Int) (var9 Int) (var10 Int) (var11 Int) (var12 Int) (var13 Int) (var14 Int) (var15 Int)) (or (not (and (inv_main23 var2 var10 var9 var8 var5 var7 var6 var4) (and (and (and (and (and (and (and (= var0 (write var2 var4 (O_node (node var6 (next (getnode (read var2 var4))))))) (= var15 var10)) (= var12 var9)) (= var13 var8)) (= var11 var5)) (= var3 var7)) (= var14 var6)) (= var1 var4)))) (inv_main25 var0 var15 var12 var13 var11 var3 var1))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int) (var3 Int) (var4 Addr) (var5 Int) (var6 Int) (var7 Int)) (not (and (inv_main17 var0 var7 var6 var5 var2 var4 var3 var1) (not (is-O_node (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int) (var3 Int) (var4 Addr) (var5 Int) (var6 Int) (var7 Int)) (not (and (inv_main23 var0 var7 var6 var5 var2 var4 var3 var1) (not (is-O_node (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int) (var3 Addr) (var4 Int) (var5 Int) (var6 Int)) (not (and (inv_main25 var0 var6 var5 var4 var2 var3 var1) (not (is-O_node (read var0 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int) (var8 Int)) (not (and (inv_main38 var2 var7 var5 var0 var3 var4 var1 var6 var8) (not (is-O_node (read var2 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int) (var8 Int)) (not (and (inv_main37 var2 var7 var5 var0 var3 var4 var1 var6 var8) (not (is-O_node (read var2 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Heap) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (not (and (inv_main52 var3 var7 var6 var0 var5 var2 var1 var4) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Heap) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (not (and (inv_main51 var3 var7 var6 var0 var5 var2 var1 var4) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Int) (var4 Int) (var5 Int)) (not (and (inv_main59 var2 var5 var4 var0 var3 var1) (not (is-O_node (read var2 var1)))))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Int) (var3 Int) (var4 Int)) (not (inv_main62 var1 var4 var3 var0 var2))))
(check-sat)
