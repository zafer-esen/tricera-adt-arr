(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unsat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (h Int) (n Addr)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defObj)))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defObj))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))

;===============================================================================
(declare-fun inv_main12 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main13 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main14 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main20 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main23 (Heap Addr Addr Addr Int Int) Bool)
(declare-fun inv_main26 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main29 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main34 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main35 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main36 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main44 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main7 (Heap Addr Int) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr)) (or (not (inv_main13 var3 var4 var2 var0 var1)) (inv_main29 (write var3 var0 (O_node (node var1 (n (getnode (read var3 var0)))))) var4 var2 var0 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr)) (or (not (and (inv_main12 var3 var4 var2 var0 var1) (not (<= 0 (+ (+ 30 (* (- 1) var1)) (- 1)))))) (inv_main13 var3 var4 var2 var0 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap) (var5 Addr)) (or (not (and (inv_main12 var4 var5 var3 var0 var1) (and (= var2 0) (<= 0 (+ (+ 30 (* (- 1) var1)) (- 1)))))) (inv_main13 var4 var5 var3 var0 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr)) (or (not (inv_main20 var3 var4 var2 var0 var1)) (inv_main26 (write var3 var0 (O_node (node (h (getnode (read var3 var0))) var2))) var4 var2 var0 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Int) (var5 Addr)) (or (not (inv_main23 var3 var5 var2 var0 var1 var4)) (inv_main23 var3 var5 var2 var0 var1 var4))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Heap) (var3 Addr) (var4 Int) (var5 Addr) (var6 Addr) (var7 Addr) (var8 Addr) (var9 node) (var10 Addr) (var11 Int) (var12 Addr) (var13 Addr) (var14 Addr) (var15 Heap) (var16 Int)) (or (not (and (inv_main14 var1 var3 var0 var10 var11) (and (= var13 nullAddr) (and (and (and (and (and (and (= var2 (newHeap (alloc var15 (O_node var9)))) (= var8 var14)) (= var5 var7)) (= var12 var6)) (= var16 var4)) (= var13 (newAddr (alloc var15 (O_node var9))))) (and (and (and (and (= var15 (write var1 var10 (O_node (node var11 (n (getnode (read var1 var10))))))) (= var14 var3)) (= var7 var0)) (= var6 var10)) (= var4 var11)))))) (inv_main23 var2 var8 var13 var12 var16 1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap) (var3 Addr) (var4 Int) (var5 Addr) (var6 Addr) (var7 Heap) (var8 Addr) (var9 Addr) (var10 Addr)) (or (not (and (inv_main26 var7 var9 var5 var0 var1) (and (and (and (and (and (= var2 var7) (= var6 var9)) (= var10 var5)) (= var8 var0)) (= var4 var1)) (= var3 (n (getnode (read var7 var0))))))) (inv_main12 var2 var6 var10 var3 (+ var4 1)))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 node) (var3 Heap) (var4 Addr)) (or (not (and (inv_main2 var3) (and (not (= var4 nullAddr)) (and (= var0 (newHeap (alloc var3 (O_node var2)))) (= var4 (newAddr (alloc var3 (O_node var2)))))))) (inv_main12 var0 var4 var1 var4 0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Int) (var5 Addr) (var6 Heap) (var7 Addr) (var8 Addr) (var9 Int) (var10 Heap)) (or (not (and (inv_main34 var6 var7 var5 var1 var2) (and (not (= var4 1)) (and (and (and (and (and (= var10 var6) (= var0 var7)) (= var3 var5)) (= var8 var1)) (= var9 var2)) (= var4 (h (getnode (read var6 var1)))))))) (inv_main36 var10 var0 var3 var8 var9))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Heap) (var3 Addr) (var4 Int) (var5 Addr) (var6 Addr) (var7 Addr) (var8 Addr) (var9 node) (var10 Addr) (var11 Int) (var12 Addr) (var13 Addr) (var14 Addr) (var15 Heap) (var16 Int)) (or (not (and (inv_main14 var1 var3 var0 var10 var11) (and (not (= var13 nullAddr)) (and (and (and (and (and (and (= var2 (newHeap (alloc var15 (O_node var9)))) (= var8 var14)) (= var5 var7)) (= var12 var6)) (= var16 var4)) (= var13 (newAddr (alloc var15 (O_node var9))))) (and (and (and (and (= var15 (write var1 var10 (O_node (node var11 (n (getnode (read var1 var10))))))) (= var14 var3)) (= var7 var0)) (= var6 var10)) (= var4 var11)))))) (inv_main20 var2 var8 var13 var12 var16))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Addr) (var4 Int) (var5 Addr) (var6 Heap) (var7 Addr) (var8 Addr) (var9 Heap)) (or (not (and (inv_main29 var6 var7 var5 var0 var1) (and (not (= var2 nullAddr)) (and (and (and (and (= var9 (write var6 var0 (O_node (node (h (getnode (read var6 var0))) 0)))) (= var2 var7)) (= var3 var5)) (= var8 var0)) (= var4 var1))))) (inv_main34 var9 var2 var3 var2 0))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Addr) (var8 Int) (var9 Addr) (var10 Addr)) (or (not (and (inv_main35 var5 var6 var4 var0 var1) (and (not (= var9 nullAddr)) (and (and (and (and (and (= var2 var5) (= var10 var6)) (= var3 var4)) (= var7 var0)) (= var8 var1)) (= var9 (n (getnode (read var5 var0)))))))) (inv_main34 var2 var10 var3 var9 (+ var8 1)))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Int) (var3 Addr) (var4 Addr) (var5 Int) (var6 Addr) (var7 Addr) (var8 Heap) (var9 Int) (var10 Addr)) (or (not (and (inv_main34 var8 var10 var6 var0 var2) (and (= var9 1) (and (and (and (and (and (= var1 var8) (= var7 var10)) (= var4 var6)) (= var3 var0)) (= var5 var2)) (= var9 (h (getnode (read var8 var0)))))))) (inv_main35 var1 var7 var4 var3 var5))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr)) (or (not (inv_main7 var1 var2 var0)) (inv_main7 var1 var2 var0))))
(assert (forall ((var0 node) (var1 Heap) (var2 Heap) (var3 Addr)) (or (not (and (inv_main2 var2) (and (= var3 nullAddr) (and (= var1 (newHeap (alloc var2 (O_node var0)))) (= var3 (newAddr (alloc var2 (O_node var0)))))))) (inv_main7 var1 var3 1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap) (var5 Addr)) (or (not (and (inv_main12 var4 var5 var3 var0 var1) (and (not (= var2 0)) (<= 0 (+ (+ 30 (* (- 1) var1)) (- 1)))))) (inv_main14 var4 var5 var3 var0 var1))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Int) (var6 Addr) (var7 Addr) (var8 Int) (var9 Addr) (var10 Addr) (var11 Addr) (var12 Heap) (var13 Int) (var14 Addr) (var15 Addr) (var16 Addr)) (or (not (and (inv_main44 var2 var4 var1 var6 var8) (and (not (= var3 nullAddr)) (and (and (and (and (and (and (= var0 var2) (= var11 var4)) (= var15 var1)) (= var9 var6)) (= var5 var8)) (= var10 (n (getnode (read var2 var6))))) (and (and (and (and (and (= var12 (write var0 var9 defObj)) (= var16 var11)) (= var7 var15)) (= var14 var9)) (= var13 var5)) (= var3 var10)))))) (inv_main44 var12 var16 var7 var3 var13))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Addr) (var4 Int) (var5 Addr) (var6 Heap) (var7 Addr) (var8 Addr) (var9 Heap)) (or (not (and (inv_main29 var6 var7 var5 var0 var1) (and (not (= var2 nullAddr)) (and (= var2 nullAddr) (and (and (and (and (= var9 (write var6 var0 (O_node (node (h (getnode (read var6 var0))) 0)))) (= var2 var7)) (= var3 var5)) (= var8 var0)) (= var4 var1)))))) (inv_main44 var9 var2 var3 var2 0))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Addr) (var8 Int) (var9 Addr) (var10 Addr)) (or (not (and (inv_main35 var5 var6 var4 var0 var1) (and (not (= var10 nullAddr)) (and (= var9 nullAddr) (and (and (and (and (and (= var2 var5) (= var10 var6)) (= var3 var4)) (= var7 var0)) (= var8 var1)) (= var9 (n (getnode (read var5 var0))))))))) (inv_main44 var2 var10 var3 var10 (+ var8 1)))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr)) (not (and (inv_main14 var3 var4 var2 var0 var1) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr)) (not (and (inv_main20 var3 var4 var2 var0 var1) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr)) (not (and (inv_main26 var3 var4 var2 var0 var1) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr)) (not (and (inv_main13 var3 var4 var2 var0 var1) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr)) (not (and (inv_main29 var3 var4 var2 var0 var1) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr)) (not (and (inv_main34 var3 var4 var2 var0 var1) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr)) (not (inv_main36 var3 var4 var2 var0 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr)) (not (and (inv_main35 var3 var4 var2 var0 var1) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr)) (not (and (inv_main44 var3 var4 var2 var0 var1) (not (is-O_node (read var3 var0)))))))
(check-sat)
