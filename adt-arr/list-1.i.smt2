(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unsat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (h Int) (n Addr)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defObj)))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defObj))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))

;===============================================================================
(declare-fun inv_main0 (Heap Int) Bool)
(declare-fun inv_main12 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main13 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main18 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main21 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main24 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main26 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main27 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main32 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main35 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main38 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main41 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main42 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main43 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main46 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main47 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main51 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main7 (Heap Addr Int) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Int) (var7 Addr) (var8 Addr)) (or (not (and (inv_main41 var5 var4 var1 var3) (and (= var6 1) (and (and (and (and (= var0 var5) (= var8 var4)) (= var2 var1)) (= var7 var3)) (= var6 (h (getnode (read var5 var3)))))))) (inv_main43 var0 var8 var2 var7))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Int)) (or (not (and (inv_main12 var3 var2 var0 var1) (= var4 0))) (inv_main26 var3 var2 var0 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Addr) (var7 Heap) (var8 Addr)) (or (not (and (inv_main38 var7 var6 var3 var5) (and (and (and (and (= var4 var7) (= var1 var6)) (= var0 var3)) (= var8 var5)) (= var2 (n (getnode (read var7 var5))))))) (inv_main12 var4 var1 var0 var2))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Heap) (var7 Addr) (var8 Int) (var9 Addr)) (or (not (and (inv_main24 var6 var5 var2 var4) (and (= var8 0) (and (and (and (and (= var1 var6) (= var3 var5)) (= var7 var2)) (= var0 var4)) (= var9 (n (getnode (read var6 var4)))))))) (inv_main12 var1 var3 var7 var9))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Heap) (var4 Addr) (var5 node)) (or (not (and (inv_main2 var3) (and (= var0 0) (and (not (= var4 nullAddr)) (and (= var2 (newHeap (alloc var3 (O_node var5)))) (= var4 (newAddr (alloc var3 (O_node var5))))))))) (inv_main12 var2 var4 var1 var4))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Addr) (var8 Heap)) (or (not (and (inv_main42 var5 var4 var1 var3) (and (= var2 2) (and (and (and (and (= var8 var5) (= var6 var4)) (= var7 var1)) (= var0 var3)) (= var2 (h (getnode (read var5 var3)))))))) (inv_main47 var8 var6 var7 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Heap) (var7 Heap) (var8 Int)) (or (not (and (inv_main41 var6 var5 var2 var4) (and (not (= var8 1)) (and (and (and (and (= var7 var6) (= var0 var5)) (= var1 var2)) (= var3 var4)) (= var8 (h (getnode (read var6 var4)))))))) (inv_main42 var7 var0 var1 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Addr) (var7 Heap) (var8 Addr)) (or (not (and (inv_main47 var7 var6 var3 var5) (and (and (and (and (= var4 var7) (= var1 var6)) (= var2 var3)) (= var0 var5)) (= var8 (n (getnode (read var7 var5))))))) (inv_main42 var4 var1 var2 var8))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Heap) (var7 Addr) (var8 Addr)) (or (not (and (inv_main46 var6 var5 var2 var4) (and (not (= var0 3)) (and (and (and (and (= var1 var6) (= var3 var5)) (= var7 var2)) (= var8 var4)) (= var0 (h (getnode (read var6 var4)))))))) (inv_main51 var1 var3 var7 var8))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Int)) (or (not (inv_main7 var1 var0 var2)) (inv_main7 var1 var0 var2))))
(assert (forall ((var0 Heap) (var1 Heap) (var2 node) (var3 Addr)) (or (not (and (inv_main2 var0) (and (= var3 nullAddr) (and (= var1 (newHeap (alloc var0 (O_node var2)))) (= var3 (newAddr (alloc var0 (O_node var2)))))))) (inv_main7 var1 var3 1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 node) (var3 Heap) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Heap) (var8 Addr) (var9 Addr) (var10 Addr) (var11 Addr) (var12 Addr) (var13 Addr)) (or (not (and (inv_main13 var7 var6 var0 var1) (and (not (= var9 nullAddr)) (and (and (and (and (and (= var5 (newHeap (alloc var3 (O_node var2)))) (= var11 var12)) (= var10 var8)) (= var4 var13)) (= var9 (newAddr (alloc var3 (O_node var2))))) (and (and (and (= var3 (write var7 var1 (O_node (node 1 (n (getnode (read var7 var1))))))) (= var12 var6)) (= var8 var0)) (= var13 var1)))))) (inv_main18 var5 var11 var9 var4))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Int) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Addr) (var7 Heap) (var8 Addr) (var9 Addr)) (or (not (and (inv_main24 var7 var6 var3 var5) (and (not (= var2 0)) (and (and (and (and (= var1 var7) (= var4 var6)) (= var8 var3)) (= var0 var5)) (= var9 (n (getnode (read var7 var5)))))))) (inv_main13 var1 var4 var8 var9))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Heap) (var3 Addr) (var4 Addr) (var5 node)) (or (not (and (inv_main2 var2) (and (not (= var0 0)) (and (not (= var4 nullAddr)) (and (= var1 (newHeap (alloc var2 (O_node var5)))) (= var4 (newAddr (alloc var2 (O_node var5))))))))) (inv_main13 var1 var4 var3 var4))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Addr) (var4 Heap)) (or (not (and (inv_main12 var4 var3 var0 var2) (not (= var1 0)))) (inv_main27 var4 var3 var0 var2))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (or (not (inv_main21 var4 var3 var1 var2 var0)) (inv_main21 var4 var3 var1 var2 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 node) (var3 Heap) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Heap) (var8 Addr) (var9 Addr) (var10 Addr) (var11 Addr) (var12 Addr) (var13 Addr)) (or (not (and (inv_main13 var7 var6 var0 var1) (and (= var9 nullAddr) (and (and (and (and (and (= var5 (newHeap (alloc var3 (O_node var2)))) (= var11 var12)) (= var10 var8)) (= var4 var13)) (= var9 (newAddr (alloc var3 (O_node var2))))) (and (and (and (= var3 (write var7 var1 (O_node (node 1 (n (getnode (read var7 var1))))))) (= var12 var6)) (= var8 var0)) (= var13 var1)))))) (inv_main21 var5 var11 var9 var4 1))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Addr) (var3 Addr) (var4 Heap) (var5 Int) (var6 Addr) (var7 Addr) (var8 Addr)) (or (not (and (inv_main42 var4 var3 var0 var2) (and (not (= var5 2)) (and (and (and (and (= var1 var4) (= var7 var3)) (= var6 var0)) (= var8 var2)) (= var5 (h (getnode (read var4 var2)))))))) (inv_main46 var1 var7 var6 var8))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Heap) (var8 Addr)) (or (not (and (inv_main43 var5 var4 var2 var3) (and (and (and (and (= var7 var5) (= var1 var4)) (= var6 var2)) (= var0 var3)) (= var8 (n (getnode (read var5 var3))))))) (inv_main41 var7 var1 var6 var8))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Addr) (var6 Addr) (var7 Heap)) (or (not (and (inv_main26 var3 var2 var0 var1) (and (and (and (= var7 (write var3 var1 (O_node (node 3 (n (getnode (read var3 var1))))))) (= var5 var2)) (= var6 var0)) (= var4 var1)))) (inv_main41 var7 var5 var6 var5))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Int)) (or (not (inv_main35 var3 var2 var0 var1 var4)) (inv_main35 var3 var2 var0 var1 var4))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Heap) (var7 Addr) (var8 Addr) (var9 node) (var10 Addr) (var11 Heap) (var12 Addr) (var13 Addr)) (or (not (and (inv_main27 var11 var10 var1 var3) (and (= var13 nullAddr) (and (and (and (and (and (= var0 (newHeap (alloc var6 (O_node var9)))) (= var2 var5)) (= var7 var12)) (= var8 var4)) (= var13 (newAddr (alloc var6 (O_node var9))))) (and (and (and (= var6 (write var11 var3 (O_node (node 2 (n (getnode (read var11 var3))))))) (= var5 var10)) (= var12 var1)) (= var4 var3)))))) (inv_main35 var0 var2 var13 var8 1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (or (not (inv_main32 var3 var2 var0 var1)) (inv_main38 (write var3 var1 (O_node (node (h (getnode (read var3 var1))) var0))) var2 var0 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (or (not (inv_main18 var3 var2 var0 var1)) (inv_main24 (write var3 var1 (O_node (node (h (getnode (read var3 var1))) var0))) var2 var0 var1))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Addr) (var8 Int)) (or (not (and (inv_main46 var5 var4 var1 var3) (and (= var8 3) (and (and (and (and (= var0 var5) (= var7 var4)) (= var6 var1)) (= var2 var3)) (= var8 (h (getnode (read var5 var3)))))))) (inv_main0 var0 0))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Heap) (var7 Addr) (var8 Addr) (var9 node) (var10 Addr) (var11 Heap) (var12 Addr) (var13 Addr)) (or (not (and (inv_main27 var11 var10 var1 var3) (and (not (= var13 nullAddr)) (and (and (and (and (and (= var0 (newHeap (alloc var6 (O_node var9)))) (= var2 var5)) (= var7 var12)) (= var8 var4)) (= var13 (newAddr (alloc var6 (O_node var9))))) (and (and (and (= var6 (write var11 var3 (O_node (node 2 (n (getnode (read var11 var3))))))) (= var5 var10)) (= var12 var1)) (= var4 var3)))))) (inv_main32 var0 var2 var13 var8))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main13 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main18 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main24 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main27 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main32 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main38 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main26 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main41 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main43 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main42 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main47 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main46 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (inv_main51 var3 var2 var0 var1))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr)) (not (and (inv_main0 var1 var0) (not (= (read var1 var2) defObj))))))
(check-sat)
