(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unsat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (h Int) (n Addr)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun defHeapObject    () HeapObject defObj)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defHeapObject)))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defHeapObject))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))

;===============================================================================
(declare-fun inv_main11 (Heap Int Addr Addr Addr Int) Bool)
(declare-fun inv_main14 (Heap Int Addr Addr Addr) Bool)
(declare-fun inv_main15 (Heap Int Addr Addr Addr) Bool)
(declare-fun inv_main19 (Heap Int Addr Addr Addr) Bool)
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main20 (Heap Int Addr Addr Addr) Bool)
(declare-fun inv_main23 (Heap Int Addr Addr Addr) Bool)
(declare-fun inv_main26 (Heap Int Addr Addr Addr Int) Bool)
(declare-fun inv_main29 (Heap Int Addr Addr Addr) Bool)
(declare-fun inv_main33 (Heap Int Addr Addr Addr) Bool)
(declare-fun inv_main34 (Heap Int Addr Addr Addr) Bool)
(declare-fun inv_main35 (Heap Int Addr Addr Addr) Bool)
(declare-fun inv_main36 (Heap Int Addr Addr Addr) Bool)
(declare-fun inv_main39 (Heap Int Addr Addr Addr) Bool)
(declare-fun inv_main42 (Heap Int Addr Addr Addr) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Addr) (var7 Heap) (var8 Int) (var9 Addr) (var10 Heap)) (or (not (and (inv_main35 var10 var5 var3 var2 var6) (and (= var0 1) (and (and (and (and (and (= var7 var10) (= var8 var5)) (= var1 var3)) (= var4 var2)) (= var9 var6)) (= var0 (h (getnode (read var10 var3)))))))) (inv_main39 var7 var8 var1 var4 var9))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Int) (var5 Heap)) (or (not (and (inv_main14 var5 var2 var1 var0 var3) (and (not (= var2 0)) (not (= var4 0))))) (inv_main19 var5 var2 var1 var0 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (or (not (inv_main26 var5 var3 var1 var0 var4 var2)) (inv_main26 var5 var3 var1 var0 var4 var2))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Addr) (var7 Heap) (var8 Addr) (var9 Addr) (var10 Addr) (var11 Int) (var12 Addr) (var13 Addr) (var14 Addr) (var15 node) (var16 Int)) (or (not (and (inv_main19 var4 var11 var10 var9 var12) (and (and (= var1 nullAddr) (and (and (and (and (and (= var2 (newHeap (alloc var7 (O_node var15)))) (= var16 var0)) (= var13 var8)) (= var6 var3)) (= var14 var5)) (= var1 (newAddr (alloc var7 (O_node var15)))))) (and (and (and (and (= var7 (write var4 var10 (O_node (node 1 (n (getnode (read var4 var10))))))) (= var0 var11)) (= var8 var10)) (= var3 var9)) (= var5 var12))))) (inv_main26 var2 var16 var13 var6 var1 1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr) (var5 node) (var6 Int) (var7 Heap) (var8 Heap) (var9 Addr) (var10 Addr) (var11 Addr) (var12 Addr) (var13 Addr) (var14 Int) (var15 Addr) (var16 Addr)) (or (not (and (inv_main20 var7 var14 var13 var12 var15) (and (and (= var4 nullAddr) (and (and (and (and (and (= var3 (newHeap (alloc var8 (O_node var5)))) (= var1 var6)) (= var16 var10)) (= var0 var11)) (= var9 var2)) (= var4 (newAddr (alloc var8 (O_node var5)))))) (and (and (and (and (= var8 (write var7 var13 (O_node (node 2 (n (getnode (read var7 var13))))))) (= var6 var14)) (= var10 var13)) (= var11 var12)) (= var2 var15))))) (inv_main26 var3 var1 var16 var0 var4 1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap) (var5 Heap) (var6 Heap) (var7 Addr) (var8 Int) (var9 Addr) (var10 Addr) (var11 Addr) (var12 Int) (var13 Addr) (var14 Addr) (var15 node) (var16 Addr)) (or (not (and (inv_main19 var4 var12 var10 var9 var13) (and (and (not (= var11 nullAddr)) (and (and (and (and (and (= var5 (newHeap (alloc var6 (O_node var15)))) (= var8 var0)) (= var3 var1)) (= var7 var16)) (= var2 var14)) (= var11 (newAddr (alloc var6 (O_node var15)))))) (and (and (and (and (= var6 (write var4 var10 (O_node (node 1 (n (getnode (read var4 var10))))))) (= var0 var12)) (= var1 var10)) (= var16 var9)) (= var14 var13))))) (inv_main23 var5 var8 var3 var7 var11))))
(assert (forall ((var0 node) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap) (var5 Int) (var6 Heap) (var7 Addr) (var8 Addr) (var9 Int) (var10 Addr) (var11 Addr) (var12 Heap) (var13 Addr) (var14 Addr) (var15 Addr) (var16 Addr)) (or (not (and (inv_main20 var4 var9 var8 var7 var10) (and (and (not (= var15 nullAddr)) (and (and (and (and (and (= var12 (newHeap (alloc var6 (O_node var0)))) (= var3 var5)) (= var11 var1)) (= var2 var14)) (= var16 var13)) (= var15 (newAddr (alloc var6 (O_node var0)))))) (and (and (and (and (= var6 (write var4 var8 (O_node (node 2 (n (getnode (read var4 var8))))))) (= var5 var9)) (= var1 var8)) (= var14 var7)) (= var13 var10))))) (inv_main23 var12 var3 var11 var2 var15))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Int) (var4 Addr) (var5 Heap)) (or (not (inv_main11 var5 var3 var2 var1 var4 var0)) (inv_main11 var5 var3 var2 var1 var4 var0))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int) (var3 Addr) (var4 Int) (var5 node) (var6 Int) (var7 Addr) (var8 Addr) (var9 Int) (var10 Addr) (var11 Heap)) (or (not (and (inv_main2 var11) (and (= var7 nullAddr) (and (and (and (and (and (= var0 (newHeap (alloc var11 (O_node var5)))) (= var2 var6)) (= var8 var1)) (= var9 var4)) (= var3 var10)) (= var7 (newAddr (alloc var11 (O_node var5)))))))) (inv_main11 var0 var2 var8 var7 var3 1))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Addr) (var3 Int) (var4 Addr) (var5 Addr) (var6 Int) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Heap)) (or (not (and (inv_main29 var10 var6 var5 var4 var7) (and (and (and (and (and (= var1 var10) (= var3 var6)) (= var2 var5)) (= var9 var4)) (= var0 var7)) (= var8 (n (getnode (read var10 var5))))))) (inv_main14 var1 var3 var8 var9 var0))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Int) (var5 Heap) (var6 node) (var7 Addr) (var8 Int) (var9 Int) (var10 Heap) (var11 Int)) (or (not (and (inv_main2 var10) (and (not (= var0 nullAddr)) (and (and (and (and (and (= var5 (newHeap (alloc var10 (O_node var6)))) (= var4 var8)) (= var1 var11)) (= var9 var3)) (= var2 var7)) (= var0 (newAddr (alloc var10 (O_node var6)))))))) (inv_main14 var5 var4 var0 var0 var2))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Addr) (var6 Int) (var7 Addr) (var8 Int) (var9 Int) (var10 Heap)) (or (not (and (inv_main33 var10 var6 var5 var4 var7) (and (not (= var8 3)) (and (and (and (and (and (= var3 var10) (= var9 var6)) (= var0 var5)) (= var1 var4)) (= var2 var7)) (= var8 (h (getnode (read var10 var5)))))))) (inv_main42 var3 var9 var0 var1 var2))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int) (var3 Int) (var4 Addr) (var5 Addr) (var6 Int) (var7 Addr) (var8 Addr) (var9 Heap) (var10 Addr)) (or (not (and (inv_main34 var9 var6 var5 var4 var7) (and (not (= var3 2)) (and (and (and (and (and (= var0 var9) (= var2 var6)) (= var8 var5)) (= var1 var4)) (= var10 var7)) (= var3 (h (getnode (read var9 var5)))))))) (inv_main33 var0 var2 var8 var1 var10))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Addr) (var8 Addr) (var9 Heap) (var10 Heap)) (or (not (and (inv_main35 var10 var6 var4 var3 var7) (and (not (= var2 1)) (and (and (and (and (and (= var9 var10) (= var5 var6)) (= var8 var4)) (= var0 var3)) (= var1 var7)) (= var2 (h (getnode (read var10 var4)))))))) (inv_main33 var9 var5 var8 var0 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Int) (var7 Addr) (var8 Heap) (var9 Int) (var10 Heap)) (or (not (and (inv_main34 var10 var6 var5 var4 var7) (and (= var1 2) (and (and (and (and (and (= var8 var10) (= var9 var6)) (= var3 var5)) (= var0 var4)) (= var2 var7)) (= var1 (h (getnode (read var10 var5)))))))) (inv_main36 var8 var9 var3 var0 var2))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Int) (var5 Heap)) (or (not (and (inv_main14 var5 var2 var1 var0 var3) (and (= var2 0) (not (= var4 0))))) (inv_main20 var5 var2 var1 var0 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Addr) (var7 Int) (var8 Heap) (var9 Addr) (var10 Heap)) (or (not (and (inv_main39 var10 var5 var3 var2 var6) (and (and (and (and (and (= var8 var10) (= var7 var5)) (= var0 var3)) (= var4 var2)) (= var1 var6)) (= var9 (n (getnode (read var10 var3))))))) (inv_main35 var8 var7 var9 var4 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Addr) (var8 Heap) (var9 Heap)) (or (not (and (inv_main15 var9 var6 var4 var3 var7) (and (= var5 0) (and (and (and (and (= var8 (write var9 var4 (O_node (node 3 (n (getnode (read var9 var4))))))) (= var5 var6)) (= var2 var4)) (= var1 var3)) (= var0 var7))))) (inv_main35 var8 var5 var1 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Addr) (var7 Addr) (var8 Int) (var9 Heap) (var10 Heap)) (or (not (and (inv_main36 var10 var5 var3 var2 var6) (and (and (and (and (and (= var9 var10) (= var8 var5)) (= var4 var3)) (= var0 var2)) (= var1 var6)) (= var7 (n (getnode (read var10 var3))))))) (inv_main34 var9 var8 var7 var0 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Addr) (var8 Heap) (var9 Heap)) (or (not (and (inv_main15 var9 var6 var4 var3 var7) (and (not (= var5 0)) (and (and (and (and (= var8 (write var9 var4 (O_node (node 3 (n (getnode (read var9 var4))))))) (= var5 var6)) (= var2 var4)) (= var1 var3)) (= var0 var7))))) (inv_main34 var8 var5 var1 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap)) (or (not (inv_main23 var4 var2 var1 var0 var3)) (inv_main29 (write var4 var1 (O_node (node (h (getnode (read var4 var1))) var3))) var2 var1 var0 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Int) (var5 Heap)) (or (not (and (inv_main14 var5 var2 var1 var0 var3) (= var4 0))) (inv_main15 var5 var2 var1 var0 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main19 var4 var2 var1 var0 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main20 var4 var2 var1 var0 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main23 var4 var2 var1 var0 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main29 var4 var2 var1 var0 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main15 var4 var2 var1 var0 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main34 var4 var2 var1 var0 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main36 var4 var2 var1 var0 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main35 var4 var2 var1 var0 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main39 var4 var2 var1 var0 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main33 var4 var2 var1 var0 var3) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap)) (not (inv_main42 var4 var2 var1 var0 var3))))
(check-sat)
