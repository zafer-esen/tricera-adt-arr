(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unsat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (h Int) (n Addr)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun defHeapObject    () HeapObject defObj)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defHeapObject)))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defHeapObject))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))

;===============================================================================
(declare-fun inv_main12 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main13 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main18 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main21 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main24 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main26 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main27 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main32 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main35 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main38 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main41 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main42 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main43 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main46 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main47 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main51 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main7 (Heap Addr Int) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Heap) (var7 Addr) (var8 Heap)) (or (not (and (inv_main42 var8 var5 var2 var1) (and (= var0 1) (and (and (and (and (= var6 var8) (= var3 var5)) (= var4 var2)) (= var7 var1)) (= var0 (h (getnode (read var8 var1)))))))) (inv_main47 var6 var3 var4 var7))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 node) (var6 Heap) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Heap) (var11 Addr) (var12 Addr) (var13 Heap)) (or (not (and (inv_main27 var6 var2 var8 var7) (and (not (= var11 nullAddr)) (and (and (and (and (and (= var13 (newHeap (alloc var10 (O_node var5)))) (= var4 var0)) (= var3 var1)) (= var9 var12)) (= var11 (newAddr (alloc var10 (O_node var5))))) (and (and (and (= var10 (write var6 var7 (O_node (node 2 (n (getnode (read var6 var7))))))) (= var0 var2)) (= var1 var8)) (= var12 var7)))))) (inv_main32 var13 var4 var11 var9))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Addr) (var5 Addr) (var6 Addr) (var7 Heap) (var8 Heap)) (or (not (and (inv_main42 var8 var4 var1 var0) (and (not (= var3 1)) (and (and (and (and (= var7 var8) (= var5 var4)) (= var6 var1)) (= var2 var0)) (= var3 (h (getnode (read var8 var0)))))))) (inv_main46 var7 var5 var6 var2))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (inv_main21 var4 var2 var1 var0 var3)) (inv_main21 var4 var2 var1 var0 var3))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Addr) (var11 node) (var12 Addr) (var13 Addr)) (or (not (and (inv_main13 var5 var3 var9 var8) (and (= var0 nullAddr) (and (and (and (and (and (= var2 (newHeap (alloc var1 (O_node var11)))) (= var6 var10)) (= var7 var13)) (= var4 var12)) (= var0 (newAddr (alloc var1 (O_node var11))))) (and (and (and (= var1 (write var5 var8 (O_node (node 1 (n (getnode (read var5 var8))))))) (= var10 var3)) (= var13 var9)) (= var12 var8)))))) (inv_main21 var2 var6 var0 var4 1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap)) (or (not (inv_main7 var2 var1 var0)) (inv_main7 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 node) (var3 Heap)) (or (not (and (inv_main2 var3) (and (= var0 nullAddr) (and (= var1 (newHeap (alloc var3 (O_node var2)))) (= var0 (newAddr (alloc var3 (O_node var2)))))))) (inv_main7 var1 var0 1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Int)) (or (not (and (inv_main12 var3 var2 var1 var0) (not (= var4 0)))) (inv_main27 var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (or (not (inv_main18 var3 var2 var1 var0)) (inv_main24 (write var3 var0 (O_node (node (h (getnode (read var3 var0))) var1))) var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Int) (var8 Heap)) (or (not (and (inv_main41 var8 var6 var1 var0) (and (= var7 2) (and (and (and (and (= var5 var8) (= var3 var6)) (= var2 var1)) (= var4 var0)) (= var7 (h (getnode (read var8 var0)))))))) (inv_main43 var5 var3 var2 var4))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Heap) (var7 Addr) (var8 Heap)) (or (not (and (inv_main43 var8 var5 var2 var1) (and (and (and (and (= var6 var8) (= var0 var5)) (= var3 var2)) (= var7 var1)) (= var4 (n (getnode (read var8 var1))))))) (inv_main41 var6 var0 var3 var4))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Heap)) (or (not (and (inv_main26 var7 var4 var1 var0) (and (and (and (= var5 (write var7 var0 (O_node (node 3 (n (getnode (read var7 var0))))))) (= var6 var4)) (= var3 var1)) (= var2 var0)))) (inv_main41 var5 var6 var3 var6))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Int) (var6 Addr) (var7 Heap) (var8 Addr)) (or (not (and (inv_main41 var7 var4 var1 var0) (and (not (= var5 2)) (and (and (and (and (= var2 var7) (= var8 var4)) (= var3 var1)) (= var6 var0)) (= var5 (h (getnode (read var7 var0)))))))) (inv_main42 var2 var8 var3 var6))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Addr) (var7 Addr) (var8 Heap)) (or (not (and (inv_main47 var8 var4 var1 var0) (and (and (and (and (= var2 var8) (= var6 var4)) (= var5 var1)) (= var3 var0)) (= var7 (n (getnode (read var8 var0))))))) (inv_main42 var2 var6 var5 var7))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (or (not (inv_main32 var3 var2 var1 var0)) (inv_main38 (write var3 var0 (O_node (node (h (getnode (read var3 var0))) var1))) var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Addr) (var6 Addr) (var7 Addr) (var8 Heap)) (or (not (and (inv_main38 var8 var5 var2 var1) (and (and (and (and (= var3 var8) (= var6 var5)) (= var7 var2)) (= var0 var1)) (= var4 (n (getnode (read var8 var1))))))) (inv_main12 var3 var6 var7 var4))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Addr) (var7 Addr) (var8 Heap) (var9 Int)) (or (not (and (inv_main24 var8 var6 var1 var0) (and (= var9 0) (and (and (and (and (= var4 var8) (= var3 var6)) (= var2 var1)) (= var7 var0)) (= var5 (n (getnode (read var8 var0)))))))) (inv_main12 var4 var3 var2 var5))))
(assert (forall ((var0 Int) (var1 node) (var2 Heap) (var3 Heap) (var4 Addr) (var5 Addr)) (or (not (and (inv_main2 var3) (and (= var0 0) (and (not (= var5 nullAddr)) (and (= var2 (newHeap (alloc var3 (O_node var1)))) (= var5 (newAddr (alloc var3 (O_node var1))))))))) (inv_main12 var2 var5 var4 var5))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Addr) (var7 Int) (var8 Addr) (var9 Heap)) (or (not (and (inv_main24 var9 var6 var1 var0) (and (not (= var7 0)) (and (and (and (and (= var4 var9) (= var3 var6)) (= var2 var1)) (= var8 var0)) (= var5 (n (getnode (read var9 var0)))))))) (inv_main13 var4 var3 var2 var5))))
(assert (forall ((var0 node) (var1 Heap) (var2 Addr) (var3 Heap) (var4 Int) (var5 Addr)) (or (not (and (inv_main2 var3) (and (not (= var4 0)) (and (not (= var5 nullAddr)) (and (= var1 (newHeap (alloc var3 (O_node var0)))) (= var5 (newAddr (alloc var3 (O_node var0))))))))) (inv_main13 var1 var5 var2 var5))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (and (inv_main12 var4 var2 var1 var0) (= var3 0))) (inv_main26 var4 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (inv_main35 var4 var2 var1 var0 var3)) (inv_main35 var4 var2 var1 var0 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 node) (var6 Heap) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Heap) (var11 Addr) (var12 Addr) (var13 Heap)) (or (not (and (inv_main27 var6 var2 var8 var7) (and (= var11 nullAddr) (and (and (and (and (and (= var13 (newHeap (alloc var10 (O_node var5)))) (= var4 var0)) (= var3 var1)) (= var9 var12)) (= var11 (newAddr (alloc var10 (O_node var5))))) (and (and (and (= var10 (write var6 var7 (O_node (node 2 (n (getnode (read var6 var7))))))) (= var0 var2)) (= var1 var8)) (= var12 var7)))))) (inv_main35 var13 var4 var11 var9 1))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Addr) (var11 node) (var12 Addr) (var13 Addr)) (or (not (and (inv_main13 var5 var3 var9 var8) (and (not (= var0 nullAddr)) (and (and (and (and (and (= var2 (newHeap (alloc var1 (O_node var11)))) (= var6 var10)) (= var7 var13)) (= var4 var12)) (= var0 (newAddr (alloc var1 (O_node var11))))) (and (and (and (= var1 (write var5 var8 (O_node (node 1 (n (getnode (read var5 var8))))))) (= var10 var3)) (= var13 var9)) (= var12 var8)))))) (inv_main18 var2 var6 var0 var4))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Addr) (var8 Heap)) (or (not (and (inv_main46 var8 var6 var2 var1) (and (not (= var0 3)) (and (and (and (and (= var5 var8) (= var3 var6)) (= var4 var2)) (= var7 var1)) (= var0 (h (getnode (read var8 var1)))))))) (inv_main51 var5 var3 var4 var7))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main13 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main18 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main24 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main27 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main32 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main38 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main26 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main41 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main43 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main42 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main47 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main46 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (inv_main51 var3 var2 var1 var0))))
(check-sat)
