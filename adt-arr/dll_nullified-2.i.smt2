(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (data_0 Int) (next Addr) (data_1 Int) (prev Addr) (data_2 Int)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun defHeapObject    () HeapObject defObj)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(declare-const allDefHeapObject (Array Addr HeapObject))
(define-fun emptyHeap () Heap (HeapCtor 0 allDefHeapObject))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defHeapObject))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))
(define-fun Heap-eq     ((h1 Heap) (h2 Heap)) Bool
  (forall ((p Addr))
          (and (= (valid h1 p) (valid h2 p))
               (= (read h1 p) (read h2 p)))))
;===============================================================================
(declare-fun inv_main11 (Heap Int Int Addr Addr) Bool)
(declare-fun inv_main14 (Heap Int Int Addr Addr Int) Bool)
(declare-fun inv_main17 (Heap Int Int Addr Addr) Bool)
(declare-fun inv_main18 (Heap Int Int Addr Addr) Bool)
(declare-fun inv_main19 (Heap Int Int Addr Addr) Bool)
(declare-fun inv_main20 (Heap Int Int Addr Addr) Bool)
(declare-fun inv_main23 (Heap Int Int Addr Addr) Bool)
(declare-fun inv_main26 (Heap Int Addr) Bool)
(declare-fun inv_main28 (Heap Int Addr) Bool)
(declare-fun inv_main29 (Heap Int Addr) Bool)
(declare-fun inv_main3 (Heap Int) Bool)
(declare-fun inv_main32 (Heap Int Addr Int) Bool)
(declare-fun inv_main34 (Heap Int Addr Int) Bool)
(declare-fun inv_main39 (Heap Int Addr) Bool)
(declare-fun inv_main40 (Heap Int Addr Addr) Bool)
(declare-fun inv_main44 (Heap Int Addr Addr Int) Bool)
(declare-fun inv_main46 (Heap Int Addr Addr Int) Bool)
(declare-fun inv_main50 (Heap Int Addr) Bool)
(declare-fun inv_main7 (Heap Int Int Addr) Bool)
(assert (forall ((var0 Heap)) (or (not (= var0 emptyHeap)) (inv_main3 var0 5))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int)) (or (not (and (inv_main26 var0 var2 var1) (and (not (= var1 nullAddr)) (= (next (getnode (read var0 var1))) nullAddr)))) (inv_main39 var0 var2 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Int) (var6 Addr) (var7 Heap) (var8 Int) (var9 Addr) (var10 Addr) (var11 Int) (var12 Heap) (var13 Int)) (or (not (and (inv_main46 var2 var13 var4 var0 var8) (and (not (= var9 nullAddr)) (and (and (= var5 0) (and (= var8 0) (and (and (and (and (= var12 var2) (= var11 var13)) (= var10 var4)) (= var6 var0)) (or (and (not (= 0 (data_2 (getnode (read var2 var4))))) (= var5 1)) (and (= 0 (data_2 (getnode (read var2 var4)))) (= var5 0)))))) (and (and (and (= var7 (write var12 var10 defObj)) (= var1 var11)) (= var3 var10)) (= var9 var6)))))) (inv_main39 var7 var1 var9))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int)) (or (not (inv_main19 var0 var3 var4 var1 var2)) (inv_main20 (write var0 var2 (O_node (node (data_0 (getnode (read var0 var2))) var1 (data_1 (getnode (read var0 var2))) (prev (getnode (read var0 var2))) (data_2 (getnode (read var0 var2)))))) var3 var4 var1 var2))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap) (var3 Addr) (var4 Int)) (or (not (and (inv_main46 var2 var4 var3 var0 var1) (not (= var1 0)))) (inv_main50 var2 var4 var3))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Heap) (var4 Int) (var5 Heap) (var6 Addr) (var7 Int) (var8 Int) (var9 Addr)) (or (not (and (inv_main46 var3 var7 var6 var0 var1) (and (not (= var8 0)) (and (= var1 0) (and (and (and (and (= var5 var3) (= var4 var7)) (= var2 var6)) (= var9 var0)) (or (and (not (= 0 (data_2 (getnode (read var3 var6))))) (= var8 1)) (and (= 0 (data_2 (getnode (read var3 var6)))) (= var8 0)))))))) (inv_main50 var5 var4 var2))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Int)) (or (not (and (inv_main34 var1 var3 var2 var0) (not (= var0 0)))) (inv_main50 var1 var3 var2))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Int) (var4 Heap) (var5 Int) (var6 Addr) (var7 Int)) (or (not (and (inv_main34 var2 var7 var6 var0) (and (not (= var5 0)) (and (= var0 0) (and (and (and (= var4 var2) (= var3 var7)) (= var1 var6)) (or (and (not (= 0 (data_2 (getnode (read var2 var6))))) (= var5 1)) (and (= 0 (data_2 (getnode (read var2 var6)))) (= var5 0)))))))) (inv_main50 var4 var3 var1))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int)) (or (not (inv_main11 var0 var3 var4 var1 var2)) (inv_main17 (write var0 var2 (O_node (node 0 (next (getnode (read var0 var2))) (data_1 (getnode (read var0 var2))) (prev (getnode (read var0 var2))) (data_2 (getnode (read var0 var2)))))) var3 var4 var1 var2))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int)) (or (not (inv_main39 var0 var2 var1)) (inv_main40 var0 var2 var1 (prev (getnode (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int)) (or (not (inv_main17 var0 var3 var4 var1 var2)) (inv_main18 (write var0 var2 (O_node (node (data_0 (getnode (read var0 var2))) (next (getnode (read var0 var2))) 0 (prev (getnode (read var0 var2))) (data_2 (getnode (read var0 var2)))))) var3 var4 var1 var2))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int)) (or (not (inv_main18 var0 var3 var4 var1 var2)) (inv_main19 (write var0 var2 (O_node (node (data_0 (getnode (read var0 var2))) (next (getnode (read var0 var2))) (data_1 (getnode (read var0 var2))) (prev (getnode (read var0 var2))) 0))) var3 var4 var1 var2))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Int) (var4 Heap) (var5 Int) (var6 Addr) (var7 Int)) (or (not (and (inv_main34 var2 var7 var6 var0) (and (= var5 0) (and (= var0 0) (and (and (and (= var4 var2) (= var3 var7)) (= var1 var6)) (or (and (not (= 0 (data_2 (getnode (read var2 var6))))) (= var5 1)) (and (= 0 (data_2 (getnode (read var2 var6)))) (= var5 0)))))))) (inv_main29 var4 var3 var1))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Addr) (var3 Addr) (var4 Int) (var5 Heap) (var6 Addr) (var7 Int) (var8 Int) (var9 Int)) (or (not (and (inv_main20 var1 var8 var9 var2 var6) (and (not (= var3 nullAddr)) (and (and (and (and (= var5 (write var1 var6 (O_node (node (data_0 (getnode (read var1 var6))) (next (getnode (read var1 var6))) (data_1 (getnode (read var1 var6))) nullAddr (data_2 (getnode (read var1 var6))))))) (= var4 var8)) (= var7 var9)) (= var3 var2)) (= var0 var6))))) (inv_main23 var5 var4 var7 var3 var0))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int) (var3 Addr) (var4 Int) (var5 Addr) (var6 Heap)) (or (not (and (inv_main29 var0 var4 var3) (and (and (and (= var6 var0) (= var2 var4)) (= var1 var3)) (= var5 (next (getnode (read var0 var3))))))) (inv_main26 var6 var2 var5))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int) (var3 Int)) (or (not (and (inv_main7 var0 var2 var3 var1) (not (<= 0 (+ var3 (- 1)))))) (inv_main26 var0 var2 var1))))
(assert (forall ((var0 Heap) (var1 Int) (var2 Addr) (var3 Int)) (or (not (and (inv_main32 var0 var3 var2 var1) (not (= var1 0)))) (inv_main34 var0 var3 var2 1))))
(assert (forall ((var0 Heap) (var1 Int) (var2 Addr) (var3 Heap) (var4 Int) (var5 Int) (var6 Addr) (var7 Int)) (or (not (and (inv_main32 var0 var7 var6 var4) (and (= var4 0) (and (and (and (= var3 var0) (= var5 var7)) (= var2 var6)) (or (and (not (= 0 (data_1 (getnode (read var0 var6))))) (= var1 1)) (and (= 0 (data_1 (getnode (read var0 var6)))) (= var1 0))))))) (inv_main34 var3 var5 var2 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Int) (var7 Int) (var8 Addr) (var9 Int)) (or (not (and (inv_main23 var2 var7 var9 var3 var5) (and (and (and (and (= var4 (write var2 var3 (O_node (node (data_0 (getnode (read var2 var3))) (next (getnode (read var2 var3))) (data_1 (getnode (read var2 var3))) var5 (data_2 (getnode (read var2 var3))))))) (= var0 var7)) (= var6 var9)) (= var1 var3)) (= var8 var5)))) (inv_main7 var4 var0 (+ var6 (- 1)) var8))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Addr) (var3 Int) (var4 Heap) (var5 Addr) (var6 Addr) (var7 Int) (var8 Int) (var9 Int)) (or (not (and (inv_main20 var4 var8 var9 var5 var6) (and (= var0 nullAddr) (and (and (and (and (= var1 (write var4 var6 (O_node (node (data_0 (getnode (read var4 var6))) (next (getnode (read var4 var6))) (data_1 (getnode (read var4 var6))) nullAddr (data_2 (getnode (read var4 var6))))))) (= var3 var8)) (= var7 var9)) (= var0 var5)) (= var2 var6))))) (inv_main7 var1 var3 (+ var7 (- 1)) var2))))
(assert (forall ((var0 Heap) (var1 Int)) (or (not (inv_main3 var0 var1)) (inv_main7 var0 var1 var1 nullAddr))))
(assert (forall ((var0 node) (var1 Int) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Int) (var8 Int) (var9 Int)) (or (not (and (inv_main7 var3 var8 var9 var4) (and (and (not (= nullAddr var2)) (and (and (and (and (= var5 (newHeap (alloc var3 (O_node var0)))) (= var7 var8)) (= var1 var9)) (= var6 var4)) (= var2 (newAddr (alloc var3 (O_node var0)))))) (<= 0 (+ var9 (- 1)))))) (inv_main11 var5 var7 var1 var6 var2))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Addr) (var3 Int)) (or (not (inv_main40 var1 var3 var2 var0)) (and (or (not (not (= 0 (data_0 (getnode (read var1 var2)))))) (inv_main44 var1 var3 var2 var0 1)) (or (not (= 0 (data_0 (getnode (read var1 var2))))) (inv_main44 var1 var3 var2 var0 0))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int) (var3 Addr) (var4 Int) (var5 Int)) (or (not (inv_main14 var0 var4 var5 var1 var3 var2)) (inv_main14 var0 var4 var5 var1 var3 var2))))
(assert (forall ((var0 node) (var1 Addr) (var2 Int) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Int) (var7 Int) (var8 Heap) (var9 Int)) (or (not (and (inv_main7 var4 var7 var9 var5) (and (and (= nullAddr var3) (and (and (and (and (= var8 (newHeap (alloc var4 (O_node var0)))) (= var6 var7)) (= var2 var9)) (= var1 var5)) (= var3 (newAddr (alloc var4 (O_node var0)))))) (<= 0 (+ var9 (- 1)))))) (inv_main14 var8 var6 var2 var1 var3 1))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int)) (or (not (inv_main28 var0 var2 var1)) (and (or (not (not (= 0 (data_0 (getnode (read var0 var1)))))) (inv_main32 var0 var2 var1 1)) (or (not (= 0 (data_0 (getnode (read var0 var1))))) (inv_main32 var0 var2 var1 0))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int)) (or (not (and (inv_main26 var0 var2 var1) (not (= (next (getnode (read var0 var1))) nullAddr)))) (inv_main28 var0 var2 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap) (var3 Addr) (var4 Int)) (or (not (and (inv_main44 var2 var4 var3 var0 var1) (not (= var1 0)))) (inv_main46 var2 var4 var3 var0 1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap) (var5 Heap) (var6 Int) (var7 Addr) (var8 Int) (var9 Addr)) (or (not (and (inv_main44 var5 var8 var7 var0 var3) (and (= var3 0) (and (and (and (and (= var4 var5) (= var6 var8)) (= var9 var7)) (= var2 var0)) (or (and (not (= 0 (data_1 (getnode (read var5 var7))))) (= var1 1)) (and (= 0 (data_1 (getnode (read var5 var7)))) (= var1 0))))))) (inv_main46 var4 var6 var9 var2 var1))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int)) (not (and (inv_main11 var0 var3 var4 var1 var2) (not (is-O_node (read var0 var2)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int)) (not (and (inv_main17 var0 var3 var4 var1 var2) (not (is-O_node (read var0 var2)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int)) (not (and (inv_main18 var0 var3 var4 var1 var2) (not (is-O_node (read var0 var2)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int)) (not (and (inv_main19 var0 var3 var4 var1 var2) (not (is-O_node (read var0 var2)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int)) (not (and (inv_main20 var0 var3 var4 var1 var2) (not (is-O_node (read var0 var2)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int)) (not (and (inv_main23 var0 var3 var4 var1 var2) (not (is-O_node (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int)) (not (and (inv_main26 var0 var2 var1) (not (is-O_node (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int)) (not (and (inv_main28 var0 var2 var1) (not (is-O_node (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Int) (var2 Addr) (var3 Int)) (not (and (inv_main32 var0 var3 var2 var1) (and (= var1 0) (not (is-O_node (read var0 var2))))))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Int)) (not (and (inv_main34 var1 var3 var2 var0) (and (= var0 0) (not (is-O_node (read var1 var2))))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int)) (not (and (inv_main29 var0 var2 var1) (not (is-O_node (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int)) (not (and (inv_main39 var0 var2 var1) (not (is-O_node (read var0 var1)))))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Addr) (var3 Int)) (not (and (inv_main40 var1 var3 var2 var0) (not (is-O_node (read var1 var2)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap) (var3 Addr) (var4 Int)) (not (and (inv_main44 var2 var4 var3 var0 var1) (and (= var1 0) (not (is-O_node (read var2 var3))))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap) (var3 Addr) (var4 Int)) (not (and (inv_main46 var2 var4 var3 var0 var1) (and (= var1 0) (not (is-O_node (read var2 var3))))))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int)) (not (inv_main50 var0 var2 var1))))
(check-sat)
