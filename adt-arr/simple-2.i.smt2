(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unsat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (h Int) (n Addr)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun defHeapObject    () HeapObject defObj)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(declare-const allDefHeapObject (Array Addr HeapObject))
(define-fun emptyHeap () Heap (HeapCtor 0 allDefHeapObject))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defHeapObject))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))
(define-fun Heap-eq     ((h1 Heap) (h2 Heap)) Bool
  (forall ((p Addr))
          (and (= (valid h1 p) (valid h2 p))
               (= (read h1 p) (read h2 p)))))
;===============================================================================
(declare-fun inv_main0 (Heap Int) Bool)
(declare-fun inv_main12 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main13 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main18 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main21 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main24 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main26 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main30 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main31 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main32 (Heap Addr Addr Addr) Bool)
(declare-fun inv_main7 (Heap Addr Int) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (or (not (inv_main12 var3 var2 var0 var1)) (inv_main26 (write var3 var1 (O_node (node 1 (n (getnode (read var3 var1)))))) var2 var0 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Addr) (var5 Addr) (var6 Heap) (var7 Heap) (var8 Addr) (var9 Addr)) (or (not (and (inv_main24 var6 var5 var2 var4) (and (= var3 0) (and (and (and (and (= var7 var6) (= var9 var5)) (= var0 var2)) (= var1 var4)) (= var8 (n (getnode (read var6 var4)))))))) (inv_main12 var7 var9 var0 var8))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Int) (var4 Heap) (var5 node)) (or (not (and (inv_main2 var2) (and (= var3 0) (and (not (= var0 nullAddr)) (and (= var4 (newHeap (alloc var2 (O_node var5)))) (= var0 (newAddr (alloc var2 (O_node var5))))))))) (inv_main12 var4 var0 var1 var0))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Int)) (or (not (inv_main7 var1 var0 var2)) (inv_main7 var1 var0 var2))))
(assert (forall ((var0 Heap) (var1 Heap) (var2 Addr) (var3 node)) (or (not (and (inv_main2 var1) (and (= var2 nullAddr) (and (= var0 (newHeap (alloc var1 (O_node var3)))) (= var2 (newAddr (alloc var1 (O_node var3)))))))) (inv_main7 var0 var2 1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Heap) (var8 Int)) (or (not (and (inv_main30 var5 var4 var1 var3) (and (= var8 1) (and (and (and (and (= var7 var5) (= var2 var4)) (= var6 var1)) (= var0 var3)) (= var8 (h (getnode (read var5 var3)))))))) (inv_main31 var7 var2 var6 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Heap) (var7 node) (var8 Addr) (var9 Addr) (var10 Addr) (var11 Heap) (var12 Heap) (var13 Addr)) (or (not (and (inv_main13 var11 var10 var3 var5) (and (not (= var4 nullAddr)) (and (and (and (and (and (= var12 (newHeap (alloc var6 (O_node var7)))) (= var13 var9)) (= var1 var0)) (= var8 var2)) (= var4 (newAddr (alloc var6 (O_node var7))))) (and (and (and (= var6 (write var11 var5 (O_node (node 1 (n (getnode (read var11 var5))))))) (= var9 var10)) (= var0 var3)) (= var2 var5)))))) (inv_main18 var12 var13 var4 var8))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Heap) (var7 Heap) (var8 Addr) (var9 Addr)) (or (not (and (inv_main24 var6 var5 var3 var4) (and (not (= var2 0)) (and (and (and (and (= var7 var6) (= var9 var5)) (= var0 var3)) (= var1 var4)) (= var8 (n (getnode (read var6 var4)))))))) (inv_main13 var7 var9 var0 var8))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Addr) (var3 Int) (var4 Heap) (var5 node)) (or (not (and (inv_main2 var1) (and (not (= var3 0)) (and (not (= var0 nullAddr)) (and (= var4 (newHeap (alloc var1 (O_node var5)))) (= var0 (newAddr (alloc var1 (O_node var5))))))))) (inv_main13 var4 var0 var2 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (or (not (inv_main21 var4 var3 var1 var2 var0)) (inv_main21 var4 var3 var1 var2 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Heap) (var7 node) (var8 Addr) (var9 Addr) (var10 Addr) (var11 Heap) (var12 Heap) (var13 Addr)) (or (not (and (inv_main13 var11 var10 var3 var5) (and (= var4 nullAddr) (and (and (and (and (and (= var12 (newHeap (alloc var6 (O_node var7)))) (= var13 var9)) (= var1 var0)) (= var8 var2)) (= var4 (newAddr (alloc var6 (O_node var7))))) (and (and (and (= var6 (write var11 var5 (O_node (node 1 (n (getnode (read var11 var5))))))) (= var9 var10)) (= var0 var3)) (= var2 var5)))))) (inv_main21 var12 var13 var4 var8 1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (or (not (inv_main18 var3 var2 var0 var1)) (inv_main24 (write var3 var1 (O_node (node (h (getnode (read var3 var1))) var0))) var2 var0 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Addr) (var6 Addr) (var7 Addr) (var8 Heap)) (or (not (and (inv_main31 var3 var2 var0 var1) (and (= var5 nullAddr) (and (and (and (and (= var8 var3) (= var7 var2)) (= var4 var0)) (= var6 var1)) (= var5 (n (getnode (read var3 var1)))))))) (inv_main0 var8 0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Addr) (var7 Heap)) (or (not (and (inv_main26 var4 var3 var0 var2) (and (= var1 nullAddr) (and (and (and (= var7 (write var4 var2 (O_node (node (h (getnode (read var4 var2))) 0)))) (= var1 var3)) (= var6 var0)) (= var5 var2))))) (inv_main0 var7 0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Addr) (var6 Addr) (var7 Addr) (var8 Heap)) (or (not (and (inv_main31 var3 var2 var0 var1) (and (not (= var5 nullAddr)) (and (and (and (and (= var8 var3) (= var7 var2)) (= var4 var0)) (= var6 var1)) (= var5 (n (getnode (read var3 var1)))))))) (inv_main30 var8 var7 var4 var5))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Addr) (var7 Heap)) (or (not (and (inv_main26 var4 var3 var0 var2) (and (not (= var1 nullAddr)) (and (and (and (= var7 (write var4 var2 (O_node (node (h (getnode (read var4 var2))) 0)))) (= var1 var3)) (= var6 var0)) (= var5 var2))))) (inv_main30 var7 var1 var6 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Int) (var5 Addr) (var6 Addr) (var7 Heap) (var8 Addr)) (or (not (and (inv_main30 var7 var6 var3 var5) (and (not (= var4 1)) (and (and (and (and (= var2 var7) (= var1 var6)) (= var8 var3)) (= var0 var5)) (= var4 (h (getnode (read var7 var5)))))))) (inv_main32 var2 var1 var8 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main13 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main18 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main24 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main12 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main26 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main30 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (inv_main32 var3 var2 var0 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main31 var3 var2 var0 var1) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap)) (not (and (inv_main0 var2 var1) (not (= (read var2 var0) defObj))))))
(check-sat)
