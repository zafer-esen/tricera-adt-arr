(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_UInt (getUInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (next Addr) (event1 Int) (event2 Int)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defObj)))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defObj))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))

;===============================================================================
(declare-fun inv_main17 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main18 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main19 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main22 (Heap Addr Addr) Bool)
(declare-fun inv_main23 (Heap Addr Addr Int) Bool)
(declare-fun inv_main25 (Heap Addr Addr Int Int) Bool)
(declare-fun inv_main26 (Heap Addr Addr Int Int) Bool)
(declare-fun inv_main3 (Heap Addr) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap)) (or (not (and (inv_main18 var4 var3 var2 var1 var0) (and (is-O_node (read var4 var0)) (is-O_node (read var4 var0))))) (inv_main19 (write var4 var0 (O_node (node (next (getnode (read var4 var0))) (event1 (getnode (read var4 var0))) var1))) var3 var2 var1 var0))))
(assert (forall ((var0 node) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (or (not (and (inv_main3 var5 var4) (and (and (and (and (or (not (= var3 0)) (not (= var2 2))) (or (not (= var3 1)) (not (= var2 3)))) (or (not (= var3 0)) (not (= var2 3)))) (and (and (and (not (<= 0 (+ (* (- 1) var3) (- 1)))) (not (<= 0 (+ (+ var3 (- 3)) (- 1))))) (not (<= 0 (+ (* (- 1) var2) (- 1))))) (not (<= 0 (+ (+ var2 (- 3)) (- 1)))))) (not (= var1 0))))) (inv_main17 (newHeap (alloc var5 (O_node var0))) var4 var3 var2 (newAddr (alloc var5 (O_node var0)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Int) (var7 Int) (var8 Addr) (var9 Addr) (var10 Heap)) (or (not (and (inv_main25 var10 var9 var8 var7 var6) (and (not (= var5 nullAddr)) (and (is-O_node (read var10 var8)) (and (and (and (and (and (= var4 var10) (= var3 var9)) (= var2 var8)) (= var1 var7)) (= var0 var6)) (= var5 (next (getnode (read var10 var8))))))))) (inv_main22 var4 var3 var5))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap)) (or (not (and (inv_main3 var2 var1) (and (not (= var1 nullAddr)) (= var0 0)))) (inv_main22 var2 var1 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Int) (var4 Int) (var5 Int) (var6 Addr) (var7 Addr) (var8 Heap)) (or (not (and (inv_main23 var8 var7 var6 var5) (and (and (or (and (= var4 1) (= var3 3)) (and (= var4 0) (= var3 2))) (is-O_node (read var8 var6))) (and (and (and (and (= var2 var8) (= var1 var7)) (= var0 var6)) (= var4 var5)) (= var3 (event2 (getnode (read var8 var6)))))))) (inv_main26 var2 var1 var0 var4 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap)) (or (not (and (inv_main22 var2 var1 var0) (is-O_node (read var2 var0)))) (inv_main23 var2 var1 var0 (event1 (getnode (read var2 var0)))))))
(assert (forall ((var0 Heap)) (or (not (inv_main2 var0)) (inv_main3 var0 nullAddr))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Int) (var7 Int) (var8 Addr) (var9 Heap)) (or (not (and (inv_main19 var9 var8 var7 var6 var5) (and (and (is-O_node (read var9 var5)) (is-O_node (read var9 var5))) (and (and (and (and (= var4 (write var9 var5 (O_node (node var8 (event1 (getnode (read var9 var5))) (event2 (getnode (read var9 var5))))))) (= var3 var8)) (= var2 var7)) (= var1 var6)) (= var0 var5))))) (inv_main3 var4 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap)) (or (not (and (inv_main3 var4 var3) (and (or (or (or (<= 0 (+ (* (- 1) var2) (- 1))) (<= 0 (+ (+ var2 (- 3)) (- 1)))) (<= 0 (+ (* (- 1) var1) (- 1)))) (<= 0 (+ (+ var1 (- 3)) (- 1)))) (not (= var0 0))))) (inv_main3 var4 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap)) (or (not (and (inv_main3 var4 var3) (and (and (or (or (and (= var2 0) (= var1 2)) (and (= var2 1) (= var1 3))) (and (= var2 0) (= var1 3))) (and (and (and (not (<= 0 (+ (* (- 1) var2) (- 1)))) (not (<= 0 (+ (+ var2 (- 3)) (- 1))))) (not (<= 0 (+ (* (- 1) var1) (- 1))))) (not (<= 0 (+ (+ var1 (- 3)) (- 1)))))) (not (= var0 0))))) (inv_main3 var4 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Heap)) (or (not (inv_main26 var4 var3 var2 var1 var0)) (inv_main25 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Int) (var4 Int) (var5 Int) (var6 Addr) (var7 Addr) (var8 Heap)) (or (not (and (inv_main23 var8 var7 var6 var5) (and (and (and (or (not (= var4 1)) (not (= var3 3))) (or (not (= var4 0)) (not (= var3 2)))) (is-O_node (read var8 var6))) (and (and (and (and (= var2 var8) (= var1 var7)) (= var0 var6)) (= var4 var5)) (= var3 (event2 (getnode (read var8 var6)))))))) (inv_main25 var2 var1 var0 var4 var3))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap)) (or (not (and (inv_main17 var4 var3 var2 var1 var0) (and (is-O_node (read var4 var0)) (is-O_node (read var4 var0))))) (inv_main18 (write var4 var0 (O_node (node (next (getnode (read var4 var0))) var2 (event2 (getnode (read var4 var0)))))) var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main17 var4 var3 var2 var1 var0) (not (is-O_node (read var4 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main17 var4 var3 var2 var1 var0) (and (is-O_node (read var4 var0)) (not (is-O_node (read var4 var0))))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main18 var4 var3 var2 var1 var0) (not (is-O_node (read var4 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main18 var4 var3 var2 var1 var0) (and (is-O_node (read var4 var0)) (not (is-O_node (read var4 var0))))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main19 var4 var3 var2 var1 var0) (not (is-O_node (read var4 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Heap)) (not (and (inv_main19 var4 var3 var2 var1 var0) (and (is-O_node (read var4 var0)) (not (is-O_node (read var4 var0))))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap)) (not (and (inv_main22 var2 var1 var0) (not (is-O_node (read var2 var0)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap)) (not (and (inv_main23 var3 var2 var1 var0) (not (is-O_node (read var3 var1)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Heap)) (not (inv_main26 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (inv_main25 var4 var3 var2 var1 var0) (not (is-O_node (read var4 var2)))))))
(check-sat)
