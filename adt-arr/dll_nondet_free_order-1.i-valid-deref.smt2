(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((AddrRange 0))
                   (((AddrRange (AddrRangeStart Addr) (AddrRangeSize Int)))))

(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_UInt (getUInt Int)) (O_Addr (getAddr Addr)) (O_AddrRange (getAddrRange AddrRange)) (O_node (getnode node)) (defObj))
                   ((node (|node::next| Addr) (|node::prev| Addr)))))
(declare-datatypes ((BatchAllocResHeap 0) (AllocResHeap 0) (Heap 0))
                   (((BatchAllocResHeap   (newBatchHeap Heap) (newAddrRange AddrRange)))
                   ((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defObj)))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defObj))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))

;===============================================================================
(declare-fun inv_main (Heap Int Int Addr) Bool)
(declare-fun inv_main566_5 (Heap Int Int Addr Int) Bool)
(declare-fun inv_main570_3 (Heap Int Int Addr Addr) Bool)
(declare-fun inv_main574_7 (Heap Int Int Addr Addr Addr Int) Bool)
(declare-fun inv_main586_3 (Heap Int Addr Addr Addr) Bool)
(declare-fun inv_main619_3 (Heap Int) Bool)
(declare-fun inv_main620_3 (Heap Int Addr Addr) Bool)
(declare-fun inv_main_10 (Heap Int Int Addr Addr Addr) Bool)
(declare-fun inv_main_13 (Heap Int Int Addr Addr) Bool)
(declare-fun inv_main_2 (Heap Int Int Addr) Bool)
(declare-fun inv_main_4 (Heap Int Int Addr Addr) Bool)
(declare-fun inv_main_6 (Heap Int Int Addr Addr Addr) Bool)
(assert (forall ((var0 Int) (var1 Heap)) (or (not (and (= var1 emptyHeap) (= var0 3))) (inv_main619_3 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Int) (var4 Heap)) (or (not (and (inv_main570_3 var4 var3 var2 var1 var0) (not (<= 0 (+ (+ var2 (- 1)) (- 1)))))) (inv_main_4 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Heap)) (or (not (inv_main574_7 var6 var5 var4 var3 var2 var1 var0)) (inv_main574_7 var6 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int) (var5 node) (var6 Heap) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Int) (var11 Int) (var12 Heap)) (or (not (and (inv_main570_3 var12 var11 var10 var9 var8) (and (and (and (= nullAddr var7) (and (and (and (and (and (= var6 (newHeap (alloc var12 (O_node var5)))) (= var4 var11)) (= var3 var10)) (= var2 var9)) (= var1 var8)) (= var7 (newAddr (alloc var12 (O_node var5)))))) (<= 0 (+ (+ var10 (- 1)) (- 1)))) (= var0 1)))) (inv_main574_7 var6 var4 var3 var2 var1 var7 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Heap)) (or (not (inv_main566_5 var4 var3 var2 var1 var0)) (inv_main566_5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap) (var5 Addr) (var6 Int) (var7 Heap)) (or (not (and (inv_main619_3 var7 var6) (and (and (= nullAddr var5) (and (and (and (= var4 (newHeap (alloc var7 (O_node var3)))) (= var2 var6)) (= var1 var6)) (= var5 (newAddr (alloc var7 (O_node var3)))))) (= var0 1)))) (inv_main566_5 var4 var2 var1 var5 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Int) (var4 node) (var5 Heap) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Int) (var10 Int) (var11 Heap)) (or (not (and (inv_main570_3 var11 var10 var9 var8 var7) (and (and (not (= nullAddr var6)) (and (and (and (and (and (= var5 (newHeap (alloc var11 (O_node var4)))) (= var3 var10)) (= var2 var9)) (= var1 var8)) (= var0 var7)) (= var6 (newAddr (alloc var11 (O_node var4)))))) (<= 0 (+ (+ var9 (- 1)) (- 1)))))) (inv_main_6 var5 var3 var2 var1 var0 var6))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (and (inv_main620_3 var4 var3 var2 var1) (and (is-O_node (read var4 var1)) (= var0 (|node::prev| (getnode (read var4 var1))))))) (inv_main586_3 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 node) (var3 Heap) (var4 Addr) (var5 Int) (var6 Heap)) (or (not (and (inv_main619_3 var6 var5) (and (not (= nullAddr var4)) (and (and (and (= var3 (newHeap (alloc var6 (O_node var2)))) (= var1 var5)) (= var0 var5)) (= var4 (newAddr (alloc var6 (O_node var2)))))))) (inv_main var3 var1 var0 var4))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int) (var5 Heap)) (or (not (and (inv_main_4 var5 var4 var3 var2 var1) (and (and (is-O_node (read var5 var2)) (is-O_node (read var5 var2))) (= var0 (write var5 var2 (O_node (node var1 (|node::prev| (getnode (read var5 var2)))))))))) (inv_main_13 var0 var4 var3 var2 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Int) (var4 Heap) (var5 Addr) (var6 Addr) (var7 Int) (var8 Int) (var9 Heap)) (or (not (and (inv_main_13 var9 var8 var7 var6 var5) (and (and (is-O_node (read var9 var5)) (is-O_node (read var9 var5))) (and (and (and (and (= var4 (write var9 var5 (O_node (node (|node::next| (getnode (read var9 var5))) var6)))) (= var3 var8)) (= var2 var7)) (= var1 var6)) (= var0 var5))))) (inv_main620_3 var4 var3 var0 var0))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Heap)) (or (not (and (inv_main_6 var6 var5 var4 var3 var2 var1) (and (and (is-O_node (read var6 var1)) (is-O_node (read var6 var1))) (= var0 (write var6 var1 (O_node (node var2 (|node::prev| (getnode (read var6 var1)))))))))) (inv_main_10 var0 var5 var4 var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Heap) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Int) (var11 Int) (var12 Heap)) (or (not (and (inv_main_10 var12 var11 var10 var9 var8 var7) (and (and (and (is-O_node (read var12 var8)) (is-O_node (read var12 var8))) (and (and (and (and (and (= var6 (write var12 var8 (O_node (node (|node::next| (getnode (read var12 var8))) var7)))) (= var5 var11)) (= var4 var10)) (= var3 var9)) (= var2 var8)) (= var1 var7))) (= var0 (+ var4 (- 1)))))) (inv_main570_3 var6 var5 var0 var3 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Heap) (var4 Addr) (var5 Int) (var6 Int) (var7 Heap)) (or (not (and (inv_main_2 var7 var6 var5 var4) (and (and (is-O_node (read var7 var4)) (is-O_node (read var7 var4))) (and (and (and (= var3 (write var7 var4 (O_node (node (|node::next| (getnode (read var7 var4))) var4)))) (= var2 var6)) (= var1 var5)) (= var0 var4))))) (inv_main570_3 var3 var2 var1 var0 var0))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int) (var3 Int) (var4 Heap)) (or (not (and (inv_main var4 var3 var2 var1) (and (and (is-O_node (read var4 var1)) (is-O_node (read var4 var1))) (= var0 (write var4 var1 (O_node (node var1 (|node::prev| (getnode (read var4 var1)))))))))) (inv_main_2 var0 var3 var2 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Heap)) (not (and (inv_main var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Heap)) (not (and (inv_main var3 var2 var1 var0) (and (is-O_node (read var3 var0)) (not (is-O_node (read var3 var0))))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Heap)) (not (and (inv_main_2 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Heap)) (not (and (inv_main_2 var3 var2 var1 var0) (and (is-O_node (read var3 var0)) (not (is-O_node (read var3 var0))))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int) (var5 Heap)) (not (and (inv_main_6 var5 var4 var3 var2 var1 var0) (not (is-O_node (read var5 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int) (var5 Heap)) (not (and (inv_main_6 var5 var4 var3 var2 var1 var0) (and (is-O_node (read var5 var0)) (not (is-O_node (read var5 var0))))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int) (var5 Heap)) (not (and (inv_main_10 var5 var4 var3 var2 var1 var0) (not (is-O_node (read var5 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Int) (var5 Heap)) (not (and (inv_main_10 var5 var4 var3 var2 var1 var0) (and (is-O_node (read var5 var1)) (not (is-O_node (read var5 var1))))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Int) (var4 Heap)) (not (and (inv_main_4 var4 var3 var2 var1 var0) (not (is-O_node (read var4 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Int) (var4 Heap)) (not (and (inv_main_4 var4 var3 var2 var1 var0) (and (is-O_node (read var4 var1)) (not (is-O_node (read var4 var1))))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Int) (var4 Heap)) (not (and (inv_main_13 var4 var3 var2 var1 var0) (not (is-O_node (read var4 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Int) (var4 Heap)) (not (and (inv_main_13 var4 var3 var2 var1 var0) (and (is-O_node (read var4 var0)) (not (is-O_node (read var4 var0))))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Heap)) (not (and (inv_main620_3 var3 var2 var1 var0) (not (is-O_node (read var3 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main586_3 var4 var3 var2 var1 var0) (not (is-O_node (read var4 var1)))))))
(check-sat)
