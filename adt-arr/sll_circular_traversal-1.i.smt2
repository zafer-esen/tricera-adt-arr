(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (next Addr) (data Int)))))
(declare-datatypes ((AllocResHeap 0) (Heap 0))
                   (((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun defHeapObject    () HeapObject defObj)
(define-fun valid     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defHeapObject)))
(define-fun read ((h Heap) (p Addr)) HeapObject
  (ite (valid h p)
       (select (HeapContents h) p)
       defHeapObject))
(define-fun write ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (valid h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun alloc   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))

;===============================================================================
(declare-fun inv_main12 (Heap Int Int Int Int Addr Int) Bool)
(declare-fun inv_main15 (Heap Int Int Int Int Addr) Bool)
(declare-fun inv_main17 (Heap Int Int Int Int Addr Addr) Bool)
(declare-fun inv_main18 (Heap Int Int Int Int Addr Addr) Bool)
(declare-fun inv_main21 (Heap Int Int Int Int Addr Addr Addr) Bool)
(declare-fun inv_main24 (Heap Int Int Int Int Addr Addr Addr Int) Bool)
(declare-fun inv_main27 (Heap Int Int Int Int Addr Addr Addr) Bool)
(declare-fun inv_main33 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main36 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main39 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main4 (Heap Int Int) Bool)
(declare-fun inv_main42 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main45 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main54 (Heap Int Int Addr Int Addr) Bool)
(declare-fun inv_main9 (Heap Int Int Int Int Addr) Bool)
(assert (forall ((var0 Heap)) (or (not (= var0 emptyHeap)) (inv_main4 var0 5 1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Int) (var6 Addr) (var7 Int) (var8 Int) (var9 Addr) (var10 Addr) (var11 Heap) (var12 Heap)) (or (not (and (inv_main39 var12 var1 var2 var0 var5 var6) (and (= var4 var9) (and (and (and (and (and (and (= var11 var12) (= var8 var1)) (= var7 var2)) (= var9 var0)) (= var3 var5)) (= var10 var6)) (= var4 (next (getnode (read var12 var6)))))))) (inv_main42 var11 var8 var7 var9 (+ (+ var3 1) (* (- 1) var8)) var4))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Int) (var7 Int) (var8 Int) (var9 Addr) (var10 Int) (var11 Heap) (var12 Addr) (var13 Int) (var14 Int) (var15 Addr) (var16 Int) (var17 Heap) (var18 Addr) (var19 Heap)) (or (not (and (inv_main45 var17 var10 var2 var9 var13 var4) (and (not (= var18 var0)) (and (and (not (= var3 var5)) (and (and (and (and (and (and (= var19 var17) (= var16 var10)) (= var7 var2)) (= var5 var9)) (= var8 var13)) (= var3 var4)) (= var12 (next (getnode (read var17 var4)))))) (and (and (and (and (and (and (= var11 (write var19 var3 defObj)) (= var14 var16)) (= var6 var7)) (= var0 var5)) (= var1 var8)) (= var15 var3)) (= var18 var12)))))) (inv_main42 var11 var14 var6 var0 (+ var1 1) var18))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Int) (var5 Addr) (var6 Heap) (var7 Int) (var8 Heap) (var9 Addr) (var10 Addr) (var11 Int) (var12 Int)) (or (not (and (inv_main45 var8 var1 var2 var0 var4 var5) (and (not (= var10 var9)) (and (= var3 var9) (and (and (and (and (and (and (= var6 var8) (= var12 var1)) (= var7 var2)) (= var9 var0)) (= var11 var4)) (= var3 var5)) (= var10 (next (getnode (read var8 var5))))))))) (inv_main42 var6 var12 var7 var9 (+ var11 1) var10))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Int) (var4 Addr) (var5 Addr) (var6 Int) (var7 Int) (var8 Int) (var9 Heap) (var10 Addr) (var11 node) (var12 Addr) (var13 Heap) (var14 Int) (var15 Int)) (or (not (and (inv_main17 var13 var7 var3 var6 var0 var2 var4) (and (and (not (= nullAddr var5)) (and (and (and (and (and (and (and (= var9 (newHeap (alloc var13 (O_node var11)))) (= var14 var7)) (= var8 var3)) (= var1 var6)) (= var15 var0)) (= var10 var2)) (= var12 var4)) (= var5 (newAddr (alloc var13 (O_node var11)))))) (<= 0 (+ (+ var6 (- 1)) (- 1)))))) (inv_main21 var9 var14 var8 var1 var15 var10 var12 var5))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (or (not (and (inv_main33 var5 var1 var2 var0 var3 var4) (not (= var2 (data (getnode (read var5 var4))))))) (inv_main54 var5 var1 var2 var0 var3 var4))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (or (not (and (inv_main42 var5 var1 var2 var0 var3 var4) (not (= var3 (data (getnode (read var5 var4))))))) (inv_main54 var5 var1 var2 var0 var3 var4))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Int) (var5 Addr) (var6 Addr) (var7 Heap)) (or (not (inv_main21 var7 var3 var4 var2 var0 var1 var5 var6)) (inv_main27 (write var7 var6 (O_node (node var5 (data (getnode (read var7 var6)))))) var3 var4 var2 var0 var1 var5 var6))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (or (not (inv_main36 var5 var1 var2 var0 var3 var4)) (inv_main39 (write var5 var4 (O_node (node (next (getnode (read var5 var4))) var3))) var1 var2 var0 var3 var4))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Heap)) (or (not (inv_main12 var6 var3 var4 var2 var0 var1 var5)) (inv_main12 var6 var3 var4 var2 var0 var1 var5))))
(assert (forall ((var0 Heap) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Addr) (var7 node) (var8 Int) (var9 Heap)) (or (not (and (inv_main4 var9 var1 var3) (and (= nullAddr var6) (and (and (and (and (and (= var0 (newHeap (alloc var9 (O_node var7)))) (= var2 var1)) (= var5 var3)) (= var4 var1)) (= var8 var3)) (= var6 (newAddr (alloc var9 (O_node var7)))))))) (inv_main12 var0 var2 var5 var4 var8 var6 1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (or (not (and (inv_main42 var5 var1 var2 var0 var3 var4) (= var3 (data (getnode (read var5 var4)))))) (inv_main45 var5 var1 var2 var0 var3 var4))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Int) (var5 Addr) (var6 Heap)) (or (not (and (inv_main17 var6 var3 var4 var2 var0 var1 var5) (not (<= 0 (+ (+ var2 (- 1)) (- 1)))))) (inv_main18 var6 var3 var4 var2 var0 var1 var5))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Int) (var6 Addr) (var7 Int) (var8 Int) (var9 Addr) (var10 Addr) (var11 Heap) (var12 Heap)) (or (not (and (inv_main39 var12 var1 var2 var0 var5 var6) (and (not (= var4 var9)) (and (and (and (and (and (and (= var11 var12) (= var8 var1)) (= var7 var2)) (= var9 var0)) (= var3 var5)) (= var10 var6)) (= var4 (next (getnode (read var12 var6)))))))) (inv_main33 var11 var8 var7 var9 (+ var3 1) var4))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Int) (var4 Int) (var5 Addr) (var6 Heap) (var7 Int) (var8 Int) (var9 Int) (var10 Addr) (var11 Int) (var12 Addr) (var13 Heap)) (or (not (and (inv_main18 var13 var8 var3 var7 var0 var2 var5) (and (and (and (and (and (and (= var6 (write var13 var2 (O_node (node var5 (data (getnode (read var13 var2))))))) (= var11 var8)) (= var9 var3)) (= var1 var7)) (= var4 var0)) (= var12 var2)) (= var10 var5)))) (inv_main33 var6 var11 var9 var10 1 var10))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Int) (var5 Heap)) (or (not (inv_main9 var5 var3 var4 var2 var0 var1)) (inv_main15 (write var5 var1 (O_node (node var1 (data (getnode (read var5 var1)))))) var3 var4 var2 var0 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Int) (var4 Int) (var5 Int) (var6 Addr) (var7 Addr) (var8 Heap)) (or (not (inv_main24 var8 var4 var5 var3 var0 var2 var6 var7 var1)) (inv_main24 var8 var4 var5 var3 var0 var2 var6 var7 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Addr) (var4 Int) (var5 Int) (var6 node) (var7 Heap) (var8 Int) (var9 Addr) (var10 Int) (var11 Int) (var12 Addr) (var13 Int) (var14 Addr) (var15 Heap)) (or (not (and (inv_main17 var15 var11 var2 var10 var0 var1 var3) (and (and (= nullAddr var9) (and (and (and (and (and (and (and (= var7 (newHeap (alloc var15 (O_node var6)))) (= var5 var11)) (= var13 var2)) (= var8 var10)) (= var4 var0)) (= var12 var1)) (= var14 var3)) (= var9 (newAddr (alloc var15 (O_node var6)))))) (<= 0 (+ (+ var10 (- 1)) (- 1)))))) (inv_main24 var7 var5 var13 var8 var4 var12 var14 var9 1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (or (not (and (inv_main33 var5 var1 var2 var0 var3 var4) (= var2 (data (getnode (read var5 var4)))))) (inv_main36 var5 var1 var2 var0 var3 var4))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Int) (var4 Int) (var5 Addr) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Int) (var10 Int) (var11 Int) (var12 Int) (var13 Addr) (var14 Int) (var15 Heap)) (or (not (and (inv_main27 var15 var11 var4 var10 var0 var1 var7 var13) (and (and (and (and (and (and (and (= var2 (write var15 var13 (O_node (node (next (getnode (read var15 var13))) var0)))) (= var12 var11)) (= var14 var4)) (= var9 var10)) (= var3 var0)) (= var5 var1)) (= var8 var7)) (= var6 var13)))) (inv_main17 var2 var12 var14 (+ var9 (- 1)) var3 var5 var6))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Int) (var8 Int) (var9 Int) (var10 Heap) (var11 Heap)) (or (not (and (inv_main15 var11 var5 var6 var4 var1 var3) (and (and (and (and (and (= var10 (write var11 var3 (O_node (node (next (getnode (read var11 var3))) var1)))) (= var0 var5)) (= var8 var6)) (= var9 var4)) (= var7 var1)) (= var2 var3)))) (inv_main17 var10 var0 var8 var9 var7 var2 var2))))
(assert (forall ((var0 Int) (var1 Int) (var2 node) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Int) (var8 Heap) (var9 Heap)) (or (not (and (inv_main4 var8 var4 var6) (and (not (= nullAddr var3)) (and (and (and (and (and (= var9 (newHeap (alloc var8 (O_node var2)))) (= var0 var4)) (= var7 var6)) (= var5 var4)) (= var1 var6)) (= var3 (newAddr (alloc var8 (O_node var2)))))))) (inv_main9 var9 var0 var7 var5 var1 var3))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Int) (var5 Heap)) (not (and (inv_main9 var5 var3 var4 var2 var0 var1) (not (is-O_node (read var5 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Int) (var5 Heap)) (not (and (inv_main15 var5 var3 var4 var2 var0 var1) (not (is-O_node (read var5 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Int) (var5 Addr) (var6 Addr) (var7 Heap)) (not (and (inv_main21 var7 var3 var4 var2 var0 var1 var5 var6) (not (is-O_node (read var7 var6)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Int) (var5 Addr) (var6 Addr) (var7 Heap)) (not (and (inv_main27 var7 var3 var4 var2 var0 var1 var5 var6) (not (is-O_node (read var7 var6)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Int) (var5 Addr) (var6 Heap)) (not (and (inv_main18 var6 var3 var4 var2 var0 var1 var5) (not (is-O_node (read var6 var1)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (not (and (inv_main33 var5 var1 var2 var0 var3 var4) (not (is-O_node (read var5 var4)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (not (and (inv_main36 var5 var1 var2 var0 var3 var4) (not (is-O_node (read var5 var4)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (not (and (inv_main39 var5 var1 var2 var0 var3 var4) (not (is-O_node (read var5 var4)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (not (and (inv_main42 var5 var1 var2 var0 var3 var4) (not (is-O_node (read var5 var4)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (not (and (inv_main45 var5 var1 var2 var0 var3 var4) (not (is-O_node (read var5 var4)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap)) (not (inv_main54 var5 var1 var2 var0 var3 var4))))
(check-sat)
