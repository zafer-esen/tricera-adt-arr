(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
(declare-heap Heap Addr HeapObject
 defObj
 ((HeapObject 0) (node 0)) (
  (
   (O_Int (getInt Int))
   (O_Addr (getAddr Addr))
   (O_node (getnode node))
   (defObj)
  )
  (
   (node (hash Int) (next Addr))
  )
))
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main22 (Heap Addr Int Int Int Int Addr) Bool)
(declare-fun inv_main23 (Heap Addr Int Int Int Int Addr) Bool)
(declare-fun inv_main25 (Heap Addr Int) Bool)
(declare-fun inv_main26 (Heap Addr Int) Bool)
(declare-fun inv_main27 (Heap Addr Int) Bool)
(declare-fun inv_main29 (Heap Addr Int Int) Bool)
(declare-fun inv_main5 (Heap Addr Int) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Heap)) (or (not (and (inv_main29 var3 var0 var2 var1) (not (<= 0 (+ var1 (* (- 1) var2)))))) (inv_main27 var3 var0 var2))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Heap) (var7 Addr) (var8 Addr) (var9 Int) (var10 Heap) (var11 Heap)) (or (not (and (inv_main29 var6 var1 var5 var3) (and (and (= var2 0) (and (<= 0 (+ var3 (* (- 1) var5))) (and (and (and (= var10 var6) (= var8 var1)) (= var9 var5)) (= var0 (hash (getnode (read var6 var1))))))) (and (and (and (= var11 var10) (= var7 var8)) (= var4 var9)) (or (and (<= 0 (+ (+ (+ var9 100) (* (- 1) var0)) (- 1))) (= var2 1)) (and (not (<= 0 (+ (+ (+ var9 100) (* (- 1) var0)) (- 1)))) (= var2 0))))))) (inv_main27 var11 var7 var4))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Addr) (var3 Int) (var4 Heap) (var5 Int) (var6 Addr)) (or (not (and (inv_main26 var4 var0 var3) (and (not (= var2 nullAddr)) (and (and (and (= var1 var4) (= var6 var0)) (= var5 var3)) (= var2 (next (getnode (read var4 var0)))))))) (inv_main25 var1 var2 var5))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap) (var3 Int)) (or (not (and (inv_main5 var2 var0 var1) (and (not (= var0 nullAddr)) (= var3 0)))) (inv_main25 var2 var0 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap)) (or (not (inv_main25 var2 var0 var1)) (inv_main29 var2 var0 var1 (hash (getnode (read var2 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap)) (or (not (inv_main27 var2 var0 var1)) (inv_main26 var2 var0 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Int) (var5 Heap) (var6 Int) (var7 Heap) (var8 Addr) (var9 Int) (var10 Heap) (var11 Addr)) (or (not (and (inv_main29 var7 var1 var6 var3) (and (and (not (= var4 0)) (and (<= 0 (+ var3 (* (- 1) var6))) (and (and (and (= var10 var7) (= var8 var1)) (= var9 var6)) (= var2 (hash (getnode (read var7 var1))))))) (and (and (and (= var5 var10) (= var11 var8)) (= var0 var9)) (or (and (<= 0 (+ (+ (+ var9 100) (* (- 1) var2)) (- 1))) (= var4 1)) (and (not (<= 0 (+ (+ (+ var9 100) (* (- 1) var2)) (- 1)))) (= var4 0))))))) (inv_main26 var5 var11 var0))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Int) (var4 Heap) (var5 Int) (var6 Addr) (var7 Int) (var8 Int) (var9 Heap) (var10 Int) (var11 Int) (var12 Addr) (var13 Addr)) (or (not (and (inv_main23 var9 var6 var8 var2 var10 var11 var13) (and (and (and (and (and (and (= var4 (write var9 var13 (O_node (node var11 (next (getnode (read var9 var13))))))) (= var12 var6)) (= var1 var8)) (= var5 var2)) (= var7 var10)) (= var3 var11)) (= var0 var13)))) (inv_main5 var4 var0 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Heap)) (or (not (and (inv_main5 var3 var0 var2) (and (or (not (<= 0 var2)) (not (<= 0 (+ 1000000 (* (- 1) var2))))) (not (= var1 0))))) (inv_main5 var3 var0 var2))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Heap)) (or (not (and (inv_main5 var4 var1 var3) (and (or (not (<= 0 (+ (+ var0 (* (- 1) var3)) (- 1)))) (not (<= 0 (+ (+ (+ var3 100) (* (- 1) var0)) (- 1))))) (and (and (<= 0 var3) (<= 0 (+ 1000000 (* (- 1) var3)))) (not (= var2 0)))))) (inv_main5 var4 var1 var3))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Heap)) (or (not (and (inv_main2 var1) (and (= var3 var1) (= var2 nullAddr)))) (inv_main5 var3 var2 var0))))
(assert (forall ((var0 Addr) (var1 node) (var2 Int) (var3 Int) (var4 Heap) (var5 Int)) (or (not (and (inv_main5 var4 var0 var3) (and (and (<= 0 (+ (+ var5 (* (- 1) var3)) (- 1))) (<= 0 (+ (+ (+ var3 100) (* (- 1) var5)) (- 1)))) (and (and (<= 0 var3) (<= 0 (+ 1000000 (* (- 1) var3)))) (not (= var2 0)))))) (inv_main22 (newHeap (alloc var4 (O_node var1))) var0 var3 var5 1 var5 (newAddr (alloc var4 (O_node var1)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Int) (var6 Addr)) (or (not (inv_main22 var3 var0 var2 var1 var4 var5 var6)) (inv_main23 (write var3 var6 (O_node (node (hash (getnode (read var3 var6))) var0))) var0 var2 var1 var4 var5 var6))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Int) (var6 Addr)) (not (and (inv_main22 var3 var0 var2 var1 var4 var5 var6) (not (is-O_node (read var3 var6)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Heap) (var4 Int) (var5 Int) (var6 Addr)) (not (and (inv_main23 var3 var0 var2 var1 var4 var5 var6) (not (is-O_node (read var3 var6)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap)) (not (and (inv_main25 var2 var0 var1) (not (is-O_node (read var2 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Heap)) (not (and (inv_main29 var3 var0 var2 var1) (and (<= 0 (+ var1 (* (- 1) var2))) (not (is-O_node (read var3 var0))))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap)) (not (inv_main27 var2 var0 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap)) (not (and (inv_main26 var2 var0 var1) (not (is-O_node (read var2 var0)))))))
(check-sat)
