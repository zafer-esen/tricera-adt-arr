(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
(declare-heap Heap Addr HeapObject
 defObj
 ((HeapObject 0) (node 0)) (
  (
   (O_Int (getInt Int))
   (O_Addr (getAddr Addr))
   (O_node (getnode node))
   (defObj)
  )
  (
   (node (next Addr) (val Int))
  )
))
(declare-fun inv_main10 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main11 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main13 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main14 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main17 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main21 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main22 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main23 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main26 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main27 (Heap Addr Int Int Addr) Bool)
(declare-fun inv_main4 (Heap Addr Int Int) Bool)
(declare-fun inv_main9 (Heap Addr Int Int Addr) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Int) (var5 Addr) (var6 Int) (var7 Addr) (var8 Heap) (var9 Heap) (var10 Addr)) (or (not (and (inv_main26 var8 var0 var6 var3 var5) (and (not (= var10 nullAddr)) (and (and (and (and (and (= var9 var8) (= var2 var0)) (= var4 var6)) (= var1 var3)) (= var7 var5)) (= var10 (next (getnode (read var8 var5)))))))) (inv_main21 var9 var2 var4 var1 var10))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Heap) (var4 Int)) (or (not (and (inv_main4 var3 var0 var2 var1) (and (not (= var0 nullAddr)) (= var4 0)))) (inv_main21 var3 var0 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Int) (var5 Int) (var6 Addr) (var7 Addr) (var8 Int) (var9 Heap) (var10 Heap)) (or (not (and (inv_main21 var9 var0 var8 var5 var7) (and (<= 0 (+ (+ var1 (* (- 1) var2)) (- 1))) (and (and (and (and (and (= var10 var9) (= var3 var0)) (= var1 var8)) (= var4 var5)) (= var6 var7)) (= var2 (val (getnode (read var9 var7)))))))) (inv_main23 var10 var3 var1 var4 var6))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (and (inv_main13 var4 var0 var3 var1 var2) (<= 0 (+ (+ (val (getnode (read var4 var2))) (* (- 1) var1)) (- 1))))) (inv_main17 var4 var0 var3 var1 var2))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Int) (var3 Int) (var4 Addr) (var5 Heap) (var6 Addr) (var7 Int) (var8 Heap) (var9 Addr)) (or (not (and (inv_main9 var8 var1 var7 var2 var4) (and (and (and (and (= var5 (write var8 var4 (O_node (node var1 (val (getnode (read var8 var4))))))) (= var9 var1)) (= var0 var7)) (= var3 var2)) (= var6 var4)))) (inv_main11 var5 var6 var0 var3 var6))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Addr) (var7 Int) (var8 Heap) (var9 Int) (var10 Addr)) (or (not (and (inv_main14 var8 var2 var7 var4 var6) (and (and (and (and (and (= var1 var8) (= var3 var2)) (= var0 var7)) (= var5 var4)) (= var10 var6)) (= var9 (val (getnode (read var8 var6))))))) (inv_main13 var1 var3 var9 var5 var10))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (and (inv_main11 var4 var0 var3 var1 var2) (not (<= 0 (+ (+ var3 (* (- 1) (val (getnode (read var4 var2))))) (- 1)))))) (inv_main13 var4 var0 var3 var1 var2))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Int) (var5 Heap) (var6 Int) (var7 node) (var8 Heap) (var9 Addr) (var10 Int)) (or (not (and (inv_main4 var8 var0 var6 var1) (and (and (and (and (and (= var5 (newHeap (alloc var8 (O_node var7)))) (= var3 var0)) (= var10 var6)) (= var4 var1)) (= var9 (newAddr (alloc var8 (O_node var7))))) (not (= var2 0))))) (inv_main10 var5 var3 var10 var4 var9))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Int) (var5 Addr) (var6 Addr) (var7 Int) (var8 Int) (var9 Heap) (var10 Int)) (or (not (and (inv_main22 var9 var1 var8 var4 var6) (and (<= 0 (+ (+ var10 (* (- 1) var7)) (- 1))) (and (and (and (and (and (= var3 var9) (= var2 var1)) (= var0 var8)) (= var7 var4)) (= var5 var6)) (= var10 (val (getnode (read var9 var6)))))))) (inv_main27 var3 var2 var0 var7 var5))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (and (inv_main11 var4 var0 var3 var1 var2) (<= 0 (+ (+ var3 (* (- 1) (val (getnode (read var4 var2))))) (- 1))))) (inv_main14 var4 var0 var3 var1 var2))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 Addr) (var4 Int) (var5 Heap)) (or (not (inv_main10 var5 var0 var4 var2 var3)) (inv_main9 (write var5 var3 (O_node (node (next (getnode (read var5 var3))) var1))) var0 var4 var2 var3))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Int) (var3 Int) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Addr) (var9 Heap) (var10 Heap)) (or (not (and (inv_main17 var9 var0 var7 var3 var4) (and (and (and (and (and (= var10 var9) (= var8 var0)) (= var6 var7)) (= var2 var3)) (= var1 var4)) (= var5 (val (getnode (read var9 var4))))))) (inv_main4 var10 var8 var6 var5))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (and (inv_main13 var4 var0 var3 var1 var2) (not (<= 0 (+ (+ (val (getnode (read var4 var2))) (* (- 1) var1)) (- 1)))))) (inv_main4 var4 var0 var3 var1))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Heap)) (or (not (and (inv_main2 var2) (and (= var0 var2) (= var1 nullAddr)))) (inv_main4 var0 var1 2147483647 (- 2147483647)))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (inv_main23 var4 var0 var3 var1 var2)) (inv_main22 var4 var0 var3 var1 var2))))
(assert (forall ((var0 Addr) (var1 Heap) (var2 Addr) (var3 Int) (var4 Int) (var5 Int) (var6 Addr) (var7 Int) (var8 Int) (var9 Heap) (var10 Addr)) (or (not (and (inv_main21 var9 var2 var8 var5 var6) (and (not (<= 0 (+ (+ var4 (* (- 1) var7)) (- 1)))) (and (and (and (and (and (= var1 var9) (= var0 var2)) (= var4 var8)) (= var3 var5)) (= var10 var6)) (= var7 (val (getnode (read var9 var6)))))))) (inv_main22 var1 var0 var4 var3 var10))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (inv_main27 var4 var0 var3 var1 var2)) (inv_main26 var4 var0 var3 var1 var2))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Int) (var5 Int) (var6 Addr) (var7 Addr) (var8 Int) (var9 Heap) (var10 Int)) (or (not (and (inv_main22 var9 var1 var8 var4 var6) (and (not (<= 0 (+ (+ var10 (* (- 1) var0)) (- 1)))) (and (and (and (and (and (= var2 var9) (= var7 var1)) (= var5 var8)) (= var0 var4)) (= var3 var6)) (= var10 (val (getnode (read var9 var6)))))))) (inv_main26 var2 var7 var5 var0 var3))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main10 var4 var0 var3 var1 var2) (not (is-O_node (read var4 var2)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main9 var4 var0 var3 var1 var2) (not (is-O_node (read var4 var2)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main11 var4 var0 var3 var1 var2) (not (is-O_node (read var4 var2)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main14 var4 var0 var3 var1 var2) (not (is-O_node (read var4 var2)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main13 var4 var0 var3 var1 var2) (not (is-O_node (read var4 var2)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main17 var4 var0 var3 var1 var2) (not (is-O_node (read var4 var2)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main21 var4 var0 var3 var1 var2) (not (is-O_node (read var4 var2)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (not (inv_main23 var4 var0 var3 var1 var2))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main22 var4 var0 var3 var1 var2) (not (is-O_node (read var4 var2)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (not (inv_main27 var4 var0 var3 var1 var2))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Int) (var4 Heap)) (not (and (inv_main26 var4 var0 var3 var1 var2) (not (is-O_node (read var4 var2)))))))
(check-sat)
